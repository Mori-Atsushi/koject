"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6384],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},m=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||i;return n?o.createElement(h,a(a({ref:t},m),{},{components:n})):o.createElement(h,a({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:r,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1054:(e,t,n)=>{n.d(t,{$h:()=>g,BQ:()=>V,E:()=>x,GU:()=>F,Hc:()=>i,IQ:()=>K,Kj:()=>z,N8:()=>B,NR:()=>l,O$:()=>M,Or:()=>w,Pc:()=>h,Q4:()=>D,TD:()=>A,UK:()=>P,Uf:()=>y,Vi:()=>U,Vn:()=>v,Zf:()=>s,_P:()=>m,dK:()=>R,eG:()=>a,eh:()=>O,f3:()=>j,kJ:()=>C,m:()=>u,oX:()=>N,pn:()=>S,pt:()=>f,q:()=>c,q0:()=>I,qK:()=>d,ql:()=>k,s7:()=>q,tB:()=>p,tQ:()=>E,wn:()=>b,yc:()=>T});var o=n(7294);const r=e=>{let{children:t,href:n}=e;return o.createElement("a",{href:`/koject/api${n}`,target:"_blank"},o.createElement("code",null,t))},i=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-provides/index.html"},"@Provides"),a=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-singleton/index.html"},"@Singleton"),c=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-qualifier/index.html"},"@Qualifier"),s=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-named/index.html"},"@Named"),l=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-binds/index.html"},"@Binds"),m=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/start.html"},"Koject.start()"),d=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-koject/stop.html"},"Koject.stop()"),p=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/inject.html"},"inject()"),u=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/lazy-inject.html"},"lazyInject()"),h=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras/index.html"},"KojectExtras"),k=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras-message/index.html"},"@KojectExtrasMessage"),f=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.component/-component-extras/index.html"},"ComponentExtras"),j=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.error/-missing-extras-exception/index.html"},"MissingExtrasException"),g=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/run-test.html"},"Koject.runTest()"),v=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/start-test.html"},"Koject.startTest()"),y=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/-test-provides/index.html"},"@TestProvides"),x=()=>o.createElement(r,{href:"/android/koject-android-core/com.moriatsushi.koject.android/application.html"},"application()"),E=()=>o.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html"},"@ViewModelComponent"),w=()=>o.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-coroutine-scope/index.html"},"@ViewModelCoroutineScope"),b=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/inject.html"},"ComponentActivity.inject()"),A=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/lazy-inject.html"},"ComponentActivity.lazyInject()"),T=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-component/index.html"},"@ActivityComponent"),C=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityContext"),N=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityCoroutineScope"),K=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/lazy-view-models.html"},"ComponentActivity.lazyViewModels()"),O=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/inject-view-models.html"},"ComponentActivity.injectViewModels()"),M=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/inject.html"},"Fragment.inject()"),S=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/lazy-inject.html"},"Fragment.lazyInject()"),P=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-component/index.html"},"@FragmentComponent"),R=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-coroutine-scope/index.html"},"@FragmentCoroutineScope"),V=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-view-coroutine-scope/index.html"},"@FragmentViewCoroutineScope"),I=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/lazy-view-models.html"},"Fragment.lazyViewModels()"),D=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html"},"Fragment.injectViewModels()"),z=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/remember-inject.html"},"rememberInject()"),F=()=>o.createElement(r,{href:"/compose/koject-compose-viewmodel/com.moriatsushi.koject.compose.viewmodel/inject-view-model.html"},"injectViewModel()"),U=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-component/index.html"},"@ComposeComponent"),q=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-coroutine-scope/index.html"},"@ComposeCoroutineScope"),B=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-context/index.html"},"@ComposeContext")},6394:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var o=n(7462),r=(n(7294),n(3905)),i=n(1054);const a={},c="Android tests",s={unversionedId:"android/tests",id:"android/tests",title:"Android tests",description:"Here we will introduce some tips for testing Android applications.",source:"@site/docs/android/tests.mdx",sourceDirName:"android",slug:"/android/tests",permalink:"/koject/docs/android/tests",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/android/tests.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Android components",permalink:"/koject/docs/android/components"},next:{title:"iOS (KMM)",permalink:"/koject/docs/ios/"}},l={},m=[{value:"Unit tests",id:"unit-tests",level:2},{value:"Instrumented tests / Robolectric tests",id:"instrumented-tests--robolectric-tests",level:2},{value:"Configuring KojectExtras",id:"configuring-kojectextras",level:3}],d={toc:m},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"android-tests"},"Android tests"),(0,r.kt)("p",null,"Here we will introduce some tips for testing Android applications."),(0,r.kt)("admonition",{title:"LINK",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To understand the basics of testing, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/test"},"Test documentation")," first.")),(0,r.kt)("h2",{id:"unit-tests"},"Unit tests"),(0,r.kt)("p",null,"If the subject to be tested does not require the Android Framework, you can start testing by mocking the application class using mock libraries such as ",(0,r.kt)("a",{parentName:"p",href:"https://site.mockito.org/"},"mockito")," or ",(0,r.kt)("a",{parentName:"p",href:"https://mockk.io/"},"MockK"),".\nWhen calling ",(0,r.kt)(i.Vn,{mdxType:"KojectStartTest"}),", specify the mocked application class as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SampleViewModelTest() {\n    @Before\n    fun start() {\n        Koject.startTest {\n            application(mock(Application::class.java))\n        }\n    }\n\n    @After\n    fun stop() {\n        Koject.stop()\n    }\n\n    @Test\n    fun test() {\n        val viewModel = inject<SampleViewModel>()\n        /* ... */\n    }\n}\n")),(0,r.kt)("p",null,"Create JUnit rules as needed:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class KojectTestRule : TestWatcher() {\n    override fun starting(description: Description) {\n        Koject.startTest {\n            application(mock(Application::class.java))\n        }\n    }\n\n    override fun finished(description: Description) {\n        Koject.stop()\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SampleViewModelTest() {\n    @get:Rule\n    val kojectTestRule = KojectTestRule()\n\n    @Test\n    fun test() {\n        val viewModel = inject<SampleViewModel>()\n        /* ... */\n    }\n}\n")),(0,r.kt)("h2",{id:"instrumented-tests--robolectric-tests"},"Instrumented tests / Robolectric tests"),(0,r.kt)("p",null,"If you want to run ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/training/testing/instrumented-tests"},"instrumented tests")," on a physical device or emulator, or run unit tests using ",(0,r.kt)("a",{parentName:"p",href:"https://robolectric.org/"},"Robolectric"),", you need to replace ",(0,r.kt)(i._P,{mdxType:"KojectStart"})," with ",(0,r.kt)("inlineCode",{parentName:"p"},"Koject.startTest()"),"."),(0,r.kt)("p",null,"First, create a test application class using ",(0,r.kt)("inlineCode",{parentName:"p"},"Koject.startTest()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TestApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        Koject.startTest {\n            application(this@TestApplication)\n        }\n    }\n}\n")),(0,r.kt)("p",null,"Next, create a custom runner to use the test application class."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TestRunner : AndroidJUnitRunner() {\n    override fun newApplication(\n        classLoader: ClassLoader?,\n        className: String?,\n        context: Context?\n    ): Application {\n        return super.newApplication(classLoader, TestApplication::class.java.name, context)\n    }\n}\n")),(0,r.kt)("p",null,"Don't forget to register the runner in the ",(0,r.kt)("inlineCode",{parentName:"p"},"build.gradle.kts")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="build.gradle.kts"',title:'"build.gradle.kts"'},'android {\n    defaultConfig {\n        /* ... */\n\n+        testInstrumentationRunner = "com.mypackage.test.TestRunner"\n    }\n\n    /* ... */\n}\n')),(0,r.kt)("p",null,"After that, you can write tests as usual."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@RunWith(AndroidJUnit4::class)\nclass SampleActivityTest() {\n    @Test\n    fun test() {\n        val scenario = launchActivity<SampleActivit>()\n    }\n}\n")),(0,r.kt)("h3",{id:"configuring-kojectextras"},"Configuring KojectExtras"),(0,r.kt)("p",null,"If you are using ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/extras"},"KojectExtras")," and need more detailed settings, consider starting Koject for each test instead of in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TestApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        // Do not start Koject\n    }\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@RunWith(AndroidJUnit4::class)\nclass SampleActivityTest() {\n    @Before\n    fun start() {\n        Koject.startTest {\n            application(ApplicationProvider.getApplicationContext())\n            addExtras(/* ... */)\n        }\n    }\n\n    @After\n    fun stop() {\n        Koject.stop()\n    }\n\n    @Test\n    fun test() {\n        val scenario = launchActivity<SampleActivit>()\n    }\n}\n")))}u.isMDXComponent=!0}}]);