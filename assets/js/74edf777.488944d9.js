"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4781],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),m=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=m(e.components);return o.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=m(n),h=r,u=d["".concat(c,".").concat(h)]||d[h]||p[h]||i;return n?o.createElement(u,a(a({ref:t},l),{},{components:n})):o.createElement(u,a({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var m=2;m<i;m++)a[m]=n[m];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1054:(e,t,n)=>{n.d(t,{$h:()=>g,BQ:()=>A,E:()=>w,GU:()=>z,Hc:()=>i,IQ:()=>S,Kj:()=>V,N8:()=>q,NR:()=>m,O$:()=>M,Or:()=>b,Pc:()=>u,Q4:()=>H,TD:()=>T,UK:()=>P,Uf:()=>v,Vi:()=>F,Vn:()=>y,Zf:()=>c,_P:()=>l,dK:()=>U,eG:()=>a,eh:()=>K,f3:()=>j,kJ:()=>O,m:()=>h,oX:()=>N,pn:()=>I,pt:()=>f,q:()=>s,q0:()=>D,qK:()=>d,ql:()=>k,s7:()=>X,tB:()=>p,tQ:()=>E,wn:()=>x,yc:()=>C});var o=n(7294);const r=e=>{let{children:t,href:n}=e;return o.createElement("a",{href:`/koject/api${n}`,target:"_blank"},o.createElement("code",null,t))},i=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-provides/index.html"},"@Provides"),a=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-singleton/index.html"},"@Singleton"),s=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-qualifier/index.html"},"@Qualifier"),c=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-named/index.html"},"@Named"),m=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-binds/index.html"},"@Binds"),l=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/start.html"},"Koject.start()"),d=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-koject/stop.html"},"Koject.stop()"),p=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/inject.html"},"inject()"),h=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject/lazy-inject.html"},"lazyInject()"),u=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras/index.html"},"KojectExtras"),k=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras-message/index.html"},"@KojectExtrasMessage"),f=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.component/-component-extras/index.html"},"ComponentExtras"),j=()=>o.createElement(r,{href:"/koject-core/com.moriatsushi.koject.error/-missing-extras-exception/index.html"},"MissingExtrasException"),g=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/run-test.html"},"Koject.runTest()"),y=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/start-test.html"},"Koject.startTest()"),v=()=>o.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/-test-provides/index.html"},"@TestProvides"),w=()=>o.createElement(r,{href:"/android/koject-android-core/com.moriatsushi.koject.android/application.html"},"application()"),E=()=>o.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html"},"@ViewModelComponent"),b=()=>o.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-coroutine-scope/index.html"},"@ViewModelCoroutineScope"),x=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/inject.html"},"ComponentActivity.inject()"),T=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/lazy-inject.html"},"ComponentActivity.lazyInject()"),C=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-component/index.html"},"@ActivityComponent"),O=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityContext"),N=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityCoroutineScope"),S=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/lazy-view-models.html"},"ComponentActivity.lazyViewModels()"),K=()=>o.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/inject-view-models.html"},"ComponentActivity.injectViewModels()"),M=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/inject.html"},"Fragment.inject()"),I=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/lazy-inject.html"},"Fragment.lazyInject()"),P=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-component/index.html"},"@FragmentComponent"),U=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-coroutine-scope/index.html"},"@FragmentCoroutineScope"),A=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-view-coroutine-scope/index.html"},"@FragmentViewCoroutineScope"),D=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/lazy-view-models.html"},"Fragment.lazyViewModels()"),H=()=>o.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html"},"Fragment.injectViewModels()"),V=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/remember-inject.html"},"rememberInject()"),z=()=>o.createElement(r,{href:"/compose/koject-compose-viewmodel/com.moriatsushi.koject.compose.viewmodel/inject-view-model.html"},"injectViewModel()"),F=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-component/index.html"},"@ComposeComponent"),X=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-coroutine-scope/index.html"},"@ComposeCoroutineScope"),q=()=>o.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-context/index.html"},"@ComposeContext")},1395:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=n(7462),r=(n(7294),n(3905)),i=n(1054);const a={},s="iOS tests",c={unversionedId:"ios/tests",id:"ios/tests",title:"iOS tests",description:"There are two ways to test KMM iOS code: testing with Kotlin only and integration testing from iOS.",source:"@site/docs/ios/tests.mdx",sourceDirName:"ios",slug:"/ios/tests",permalink:"/koject/docs/ios/tests",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/ios/tests.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Inject into Swift",permalink:"/koject/docs/ios/basic"},next:{title:"Compose",permalink:"/koject/docs/compose/"}},m={},l=[{value:"Testing with Kotlin only",id:"testing-with-kotlin-only",level:2},{value:"iOS Unit tests",id:"ios-unit-tests",level:2},{value:"iOS UI tests",id:"ios-ui-tests",level:2}],d={toc:l},p="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ios-tests"},"iOS tests"),(0,r.kt)("p",null,"There are two ways to test KMM iOS code: testing with Kotlin only and integration testing from iOS.\nHere is an introduction to both methods."),(0,r.kt)("admonition",{title:"LINK",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"To understand the basics of testing, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/test"},"Test documentation")," first.")),(0,r.kt)("h2",{id:"testing-with-kotlin-only"},"Testing with Kotlin only"),(0,r.kt)("p",null,"To test with Kotlin only, you can use ",(0,r.kt)(i.$h,{mdxType:"KojectRunTest"})," or ",(0,r.kt)(i.Vn,{mdxType:"KojectStartTest"})," to use the DI container for testing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass Controller\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class SampleTest() {\n    @Test\n    fun test() = Koject.runTest {\n        val controller = inject<Controller>() // can be injected\n    }\n}\n")),(0,r.kt)("p",null,"Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/docs/test"},"Test documentation")," for more details."),(0,r.kt)("h2",{id:"ios-unit-tests"},"iOS Unit tests"),(0,r.kt)("p",null,"To test including code written in Swift, use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.apple.com/documentation/xctest"},"XCTest"),"."),(0,r.kt)("p",null,"First, add the ",(0,r.kt)("inlineCode",{parentName:"p"},"koject-test")," dependency to ",(0,r.kt)("inlineCode",{parentName:"p"},"iosMain")," in shared/build.gradle.kts."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff",metastring:'title="shared/build.gradle.kts"',title:'"shared/build.gradle.kts"'},'kotlin {\n    /* ... */\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation("com.moriatsushi.koject:koject-core:1.3.0-beta02")\n            }\n        }\n\n        val iosMain by getting {\n+            dependencies {\n+                implementation("com.moriatsushi.koject:koject-test:1.3.0-beta02")\n+            }\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Create a ",(0,r.kt)("inlineCode",{parentName:"p"},"KojectHelper")," object and add ",(0,r.kt)("inlineCode",{parentName:"p"},"startTest()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stop()")," functions."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:'title="src/iosMain/kotlin/KojectHelper.ios.kt"',title:'"src/iosMain/kotlin/KojectHelper.ios.kt"'},"object KojectHelper {\n    fun start() {\n        Koject.start()\n    }\n\n    fun startTest() {\n        Koject.startTest()\n    }\n\n    fun stop() {\n        Koject.stop()\n    }\n}\n")),(0,r.kt)("p",null,"You can test with the DI container for testing by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"startTest")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"setUpWithError")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"stop")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"tearDownWithError"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="SampleStateTests.swift"',title:'"SampleStateTests.swift"'},"import XCTest\n@testable import ios\n@testable import shared\n\nfinal class SampleStateTests: XCTestCase {\n    override func setUpWithError() throws {\n        KojectHelper.shared.startTest()\n    }\n\n    override func tearDownWithError() throws {\n        KojectHelper.shared.stop()\n    }\n\n    func test() throws {\n        /* ... */\n    }\n}\n")),(0,r.kt)("h2",{id:"ios-ui-tests"},"iOS UI tests"),(0,r.kt)("p",null,"When performing UI tests, the DI container for the application is used, so branching must be done on the application side."),(0,r.kt)("p",null,"First, create a branch in ",(0,r.kt)("inlineCode",{parentName:"p"},"@main")," as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="MyApp.swift"',title:'"MyApp.swift"'},'import SwiftUI\nimport shared\n\n@main\nstruct MyApp: App {\n    init() {\n        #if DEBUG\n        let isTesting = CommandLine.arguments.contains("TESTING")\n        if isTesting {\n            KojectHelper.shared.startTest()\n        } else {\n            KojectHelper.shared.start()\n        }\n        #else\n        KojectHelper.shared.start()\n        #endif\n    }\n    \n    var body: some Scene {\n        /* ... */\n    }\n}\n')),(0,r.kt)("p",null,"Specify ",(0,r.kt)("inlineCode",{parentName:"p"},"launchArguments")," when starting the test, and UI tests can be executed using the DI container for testing."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="UITests.swift"',title:'"UITests.swift"'},'import XCTest\n\nfinal class UITests: XCTestCase {\n    let app = XCUIApplication()\n    \n    func testAddTask() {\n        app.launchArguments = ["TESTING"]\n        app.launch()\n        \n        /* ... */\n    }\n}\n')))}h.isMDXComponent=!0}}]);