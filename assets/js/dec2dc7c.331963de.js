"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),c=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=r,v=p["".concat(d,".").concat(u)]||p[u]||m[u]||i;return n?o.createElement(v,a(a({ref:t},s),{},{components:n})):o.createElement(v,a({ref:t},s))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1054:(e,t,n)=>{n.d(t,{Hc:()=>i,Kj:()=>p,Q4:()=>s,eG:()=>a,eh:()=>c,tB:()=>l,tQ:()=>d});var o=n(7294);const r=e=>{let{children:t,href:n}=e;return o.createElement("a",{href:`/koject/api${n}`,target:"_blank"},o.createElement("code",null,t))},i=()=>o.createElement(r,{href:"/core/com.moriatsushi.koject/-provides/index.html"},"@Provides"),a=()=>o.createElement(r,{href:"/core/com.moriatsushi.koject/-singleton/index.html"},"@Singleton"),l=()=>o.createElement(r,{href:"/core/com.moriatsushi.koject/inject.html"},"inject()"),d=()=>o.createElement(r,{href:"/android/viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html"},"@ViewModelComponent"),c=()=>o.createElement(r,{href:"/android/activity/com.moriatsushi.koject.android.activity/inject-view-models.html"},"ComponentActivity.injectViewModels()"),s=()=>o.createElement(r,{href:"/android/fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html"},"Fragment.injectViewModels()"),p=()=>o.createElement(r,{href:"/compose/core/com.moriatsushi.koject.compose/remember-inject.html"},"rememberInject()")},2730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>s});var o=n(7462),r=(n(7294),n(3905)),i=n(1054);const a={},l="Inject ViewModels",d={unversionedId:"android/viewmodel",id:"android/viewmodel",title:"Inject ViewModels",description:"Koject supports providing ViewModels.",source:"@site/docs/android/viewmodel.mdx",sourceDirName:"android",slug:"/android/viewmodel",permalink:"/koject/docs/android/viewmodel",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/android/viewmodel.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Android",permalink:"/koject/docs/android/"},next:{title:"Compose",permalink:"/koject/docs/compose/"}},c={},s=[{value:"Setup for ViewModels",id:"setup-for-viewmodels",level:2},{value:"Using ViewModels",id:"using-viewmodels",level:2},{value:"Working with SavedStateHandle",id:"working-with-savedstatehandle",level:2}],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"inject-viewmodels"},"Inject ViewModels"),(0,r.kt)("p",null,"Koject supports providing ",(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/ViewModel"},"ViewModels"),"."),(0,r.kt)("h2",{id:"setup-for-viewmodels"},"Setup for ViewModels"),(0,r.kt)("p",null,"Add dependencies according to the target to inject."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // Inject ViewModel into Activity\n    implementation("com.moriatsushi.koject:koject-android-activity:1.1.0")\n    // Inject ViewModel into Fragment\n    implementation("com.moriatsushi.koject:koject-android-fragment:1.1.0")\n    // ViewModelFactory only\n    implementation("com.moriatsushi.koject:koject-android-viewmodel:1.1.0")\n}\n')),(0,r.kt)("p",null,"Please also check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/setup"},"Setup document"),"."),(0,r.kt)("h2",{id:"using-viewmodels"},"Using ViewModels"),(0,r.kt)("p",null,"Specify the ",(0,r.kt)(i.tQ,{mdxType:"ViewModelComponent"})," and ",(0,r.kt)(i.Hc,{mdxType:"Provides"})," annotations when defining a ViewModel.\nAs with other providing types, constructor injection is available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\n@ViewModelComponent\nclass TopViewModel(\n    private val userRepository: UserRepository,\n    private val contentRepository: ContentRepository,\n): ViewModel() {\n    /* ... */\n}\n")),(0,r.kt)("p",null,"When using ViewModels, use the ",(0,r.kt)(i.eh,{mdxType:"ActivityInjectViewModels"})," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopActivity : ComponentActivity() {\n    private val viewModel: TopViewModel by injectViewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        /* ... */\n    }\n}\n")),(0,r.kt)("p",null,"For Fragment, please use the, please use the ",(0,r.kt)(i.Q4,{mdxType:"FragmentInjectViewModels"})," function instead."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopFragment : Fragment() {\n    private val viewModel: TopViewModel by injectViewModels()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?,\n    ): View? {\n        /* ... */\n    }\n}\n")),(0,r.kt)("admonition",{title:"LINK",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Check the ",(0,r.kt)("a",{parentName:"p",href:"/docs/compose/viewmodel"},"documentation")," to inject ViewModels in Jetpack Compose.")),(0,r.kt)("h2",{id:"working-with-savedstatehandle"},"Working with SavedStateHandle"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/SavedStateHandle"},"SavedStateHandle")," is used to save ViewModel state.\nKoject allows you to inject SavedStateHandle out of the box."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\n@ViewModelComponent\nclass SavedStateViewModel(\n    private val savedStateHandle: SavedStateHandle\n) : ViewModel() {\n    /* ... */\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopActivity : ComponentActivity() {\n    private val viewModel: SavedStateViewModel by injectViewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        /* ... */\n    }\n}\n")))}u.isMDXComponent=!0}}]);