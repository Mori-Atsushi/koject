"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[668],{5765:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const l={},i=void 0,r={type:"mdx",permalink:"/koject/",source:"@site/src/pages/index.mdx",description:"Koject - DI Container Library for Kotlin Multiplatform",frontMatter:{}},s=[{value:"Features",id:"features",level:2},{value:"Setup",id:"setup",level:2},{value:"Multiplatform",id:"multiplatform",level:3},{value:"Single platform",id:"single-platform",level:3},{value:"Library module",id:"library-module",level:3},{value:"Usage",id:"usage",level:2},{value:"Provide from functions",id:"provide-from-functions",level:3},{value:"Singleton Scope",id:"singleton-scope",level:3},{value:"Qualifier",id:"qualifier",level:3},{value:"Binds",id:"binds",level:3},{value:"Related libraries",id:"related-libraries",level:2}],p={toc:s},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("head",null,(0,o.kt)("title",null,"Koject - DI Container Library for Kotlin Multiplatform")),(0,o.kt)("h1",{id:"koject"},"Koject"),(0,o.kt)("p",null,"DI Container library for Kotlin Multiplatform."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    Koject.start()\n\n    val controller = inject<Controller>()\n}\n\n@Singleton\n@Provides\nclass Api\n\n@Singleton\n@Provides\nfun provideDB(): DB {\n    return DB.create()\n}\n\n@Binds\n@Singleton\n@Provides\nclass RepositoryImpl(\n    private val api: Api,\n    private val db: DB,\n): Repository\n\ninterface Repository\n\n@Provides\nclass Controller(\n    private val repository: Repository\n)\n")),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Support ",(0,o.kt)("a",{parentName:"li",href:"https://kotlinlang.org/docs/multiplatform.html"},"Kotlin Multiplatform")),(0,o.kt)("li",{parentName:"ul"},"Easy provide with annotations"),(0,o.kt)("li",{parentName:"ul"},"Code generation with ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/google/ksp"},"KSP")),(0,o.kt)("li",{parentName:"ul"},"Support multi-module project")),(0,o.kt)("h2",{id:"setup"},"Setup"),(0,o.kt)("h3",{id:"multiplatform"},"Multiplatform"),(0,o.kt)("p",null,"You need to enable KSP."),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,"build.gradle.kts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'plugins {\n    kotlin("multiplatform")\n+    id("com.google.devtools.ksp") version "<ksp-version>"\n}\n\nkotlin {\n    android()\n    jvm()\n    js(IR) {\n        nodejs()\n        browser()\n    }\n    ios()\n\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n+                implementation("com.moriatsushi.koject:koject-core:1.0.0-alpha06")\n            }\n        }\n    }\n}\n\ndependencies {\n    // Add it according to your targets.\n+    val processor = "com.moriatsushi.koject:koject-processor-app:1.0.0-alpha06"\n+    add("kspAndroid", processor)\n+    add("kspJvm", processor)\n+    add("kspJs", processor)\n+    add("kspIosX64", processor)\n+    add("kspIosArm64", processor)\n}\n'))),(0,o.kt)("h3",{id:"single-platform"},"Single platform"),(0,o.kt)("p",null,"Inject can also be used on a single platform."),(0,o.kt)("details",null,(0,o.kt)("summary",null,"build.gradle.kts"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'plugins {\n    kotlin("<target>")\n+    id("com.google.devtools.ksp") version "<ksp-version>"\n}\n\ndependencies {\n+    implementation("com.moriatsushi.koject:koject-core:1.0.0-alpha06")\n+    ksp("com.moriatsushi.koject:koject-processor-app:1.0.0-alpha06")\n}\n'))),(0,o.kt)("h3",{id:"library-module"},"Library module"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"koject-processor-lib")," to avoid generating ",(0,o.kt)("inlineCode",{parentName:"p"},"Container")," in library modules."),(0,o.kt)("details",{open:!0},(0,o.kt)("summary",null,"build.gradle.kts (Multiplatform)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'dependencies {\n    // Add it according to your targets.\n-    val processor = "com.moriatsushi.koject:koject-processor-app:1.0.0-alpha06"\n+    val processor = "com.moriatsushi.koject:koject-processor-lib:1.0.0-alpha06"\n    add("kspAndroid", processor)\n    add("kspJvm", processor)\n    add("kspJs", processor)\n    add("kspIosX64", processor)\n    add("kspIosArm64", processor)\n}\n'))),(0,o.kt)("details",null,(0,o.kt)("summary",null,"build.gradle.kts (single platform)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'dependencies {\n    implementation("com.moriatsushi.koject:koject-core:1.0.0-alpha06")\n-    ksp("com.moriatsushi.koject:koject-processor-app:1.0.0-alpha06")\n+    ksp("com.moriatsushi.koject:koject-processor-lib:1.0.0-alpha06")\n}\n'))),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Add ",(0,o.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation to the class you want to provide."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass Repository\n\n@Provides\nclass Controller(\n    private val repository: Repository\n)\n")),(0,o.kt)("p",null,"You can get an instance using ",(0,o.kt)("inlineCode",{parentName:"p"},"inject")," after calling ",(0,o.kt)("inlineCode",{parentName:"p"},"Koject.start()"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    Koject.start()\n\n    val controller = inject<Controller>()\n}\n")),(0,o.kt)("h3",{id:"provide-from-functions"},"Provide from functions"),(0,o.kt)("p",null,"Any types can be provided from top-level functions with a ",(0,o.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation. This is useful when provide outside modules classes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nfun provideDB(): DB {\n    return DB.create()\n}\n")),(0,o.kt)("p",null,"You can also provide from object functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"object DBFactory {\n    @Provides\n    fun create(): DB {\n        return DB.create()\n    }\n}\n")),(0,o.kt)("h3",{id:"singleton-scope"},"Singleton Scope"),(0,o.kt)("p",null,"By adding the ",(0,o.kt)("inlineCode",{parentName:"p"},"@Singleton")," annotation, the instance will be created only once and reused within the application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Singleton\n@Provides\nclass Api\n\n@Singleton\n@Provides\nfun provideDB(): DB {\n    return DB.create()\n}\n")),(0,o.kt)("p",null,"Note that you can't inject a normally scope type into a singleton scope type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass NormalScope\n\n@Singleton\n@Provides\nclass SingletonScope(\n    // cannot inject!\n    private val normal: NormalScope\n)\n")),(0,o.kt)("h3",{id:"qualifier"},"Qualifier"),(0,o.kt)("p",null,"When you want to provide the same type, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"@Qualifier")," annotations to distinguish between them."),(0,o.kt)("p",null,"First, define qualifier annotations with ",(0,o.kt)("inlineCode",{parentName:"p"},"@Qualifier"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n")),(0,o.kt)("p",null,"Then, specify the qualifier annotations when providing."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ID1\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@ID1\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,o.kt)("p",null,"Finally, you can use the qualifiers  to inject the instances you need."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Repository(\n    @ID1\n    val db1: DB,\n    @ID2\n    val db2: DB\n)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(DB1())\nval db2 = inject<DB>(DB2())\n")),(0,o.kt)("p",null,"You can also use a ",(0,o.kt)("inlineCode",{parentName:"p"},"@Named")," qualifier that distinguish by string."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Named("db1")\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@Named("db2")\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Repository(\n    @Named("db1")\n    val db1: DB,\n    @Named("db2")\n    val db2: DB\n)\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'val db1 = inject<DB>("db1")\nval db2 = inject<DB>("db2")\n')),(0,o.kt)("h3",{id:"binds"},"Binds"),(0,o.kt)("p",null,"By using a ",(0,o.kt)("inlineCode",{parentName:"p"},"@Binds")," annotation, it is easy to provide as a supertypes."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,o.kt)("p",null,"This is a shortcut for the following implementation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class RepositoryImpl: Repository\n\ninterface Repository\n\n@Provides\nfun provideRepository(): Repository {\n    return RepositoryImpl()\n}\n")),(0,o.kt)("p",null,"If a type has multiple supertypes, use ",(0,o.kt)("inlineCode",{parentName:"p"},"to")," parameter to specify the type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds(to = Type2::class)\n@Provides\nclass Type: Type1, Type2\n\ninterface Type1\ninterface Type2\n")),(0,o.kt)("h2",{id:"related-libraries"},"Related libraries"),(0,o.kt)("p",null,"Koject is inspired by the following libraries."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/google/dagger"},"google/dagger")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/InsertKoinIO/koin"},"InsertKoinIO/koin")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/evant/kotlin-inject"},"evant/kotlin-inject")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/mars885/hilt-binder"},"mars885/hilt-binder"))))}c.isMDXComponent=!0}}]);