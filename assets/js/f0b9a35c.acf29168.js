"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[711],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(t),f=a,m=p["".concat(u,".").concat(f)]||p[f]||d[f]||i;return t?r.createElement(m,o(o({ref:n},s),{},{components:t})):r.createElement(m,o({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={},o="Qualifier",l={unversionedId:"usage/qualifier",id:"usage/qualifier",title:"Qualifier",description:"When you want to provide the same type, you can use @Qualifier annotations to distinguish between them.",source:"@site/docs/usage/qualifier.md",sourceDirName:"usage",slug:"/usage/qualifier",permalink:"/koject/docs/usage/qualifier",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/usage/qualifier.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Start Koject",permalink:"/koject/docs/usage/basic"},next:{title:"Binds",permalink:"/koject/docs/usage/binds"}},u={},c=[],s={toc:c},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"qualifier"},"Qualifier"),(0,a.kt)("p",null,"When you want to provide the same type, you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"@Qualifier")," annotations to distinguish between them."),(0,a.kt)("p",null,"First, define qualifier annotations with ",(0,a.kt)("inlineCode",{parentName:"p"},"@Qualifier"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n")),(0,a.kt)("p",null,"Then, specify the qualifier annotations when providing."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ID1\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@ID1\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,a.kt)("p",null,"Finally, you can use the qualifiers  to inject the instances you need."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Repository(\n    @ID1\n    val db1: DB,\n    @ID2\n    val db2: DB\n)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(DB1())\nval db2 = inject<DB>(DB2())\n")),(0,a.kt)("p",null,"You can also use a ",(0,a.kt)("inlineCode",{parentName:"p"},"@Named")," qualifier that distinguish by string."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Named("db1")\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@Named("db2")\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Repository(\n    @Named("db1")\n    val db1: DB,\n    @Named("db2")\n    val db2: DB\n)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'val db1 = inject<DB>("db1")\nval db2 = inject<DB>("db2")\n')))}d.isMDXComponent=!0}}]);