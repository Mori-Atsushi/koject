"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3893],{3905:(e,t,o)=>{o.d(t,{Zo:()=>l,kt:()=>h});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),m=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},l=function(e){var t=m(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=m(o),u=r,h=p["".concat(s,".").concat(u)]||p[u]||d[u]||i;return o?n.createElement(h,a(a({ref:t},l),{},{components:o})):n.createElement(h,a({ref:t},l))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var m=2;m<i;m++)a[m]=o[m];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1054:(e,t,o)=>{o.d(t,{$h:()=>f,BQ:()=>A,E:()=>x,GU:()=>Q,Hc:()=>i,IQ:()=>B,Kj:()=>z,N8:()=>F,NR:()=>m,O$:()=>O,Or:()=>b,Pc:()=>h,Q4:()=>K,TD:()=>N,UK:()=>T,Uf:()=>g,Vi:()=>S,Vn:()=>v,Zf:()=>s,_P:()=>l,dK:()=>M,eG:()=>a,eh:()=>D,f3:()=>j,kJ:()=>R,m:()=>u,oX:()=>I,pn:()=>P,pt:()=>y,q:()=>c,q0:()=>q,qK:()=>p,ql:()=>k,s7:()=>V,tB:()=>d,tQ:()=>E,wn:()=>w,yc:()=>C});var n=o(7294);const r=e=>{let{children:t,href:o}=e;return n.createElement("a",{href:`/koject/api${o}`,target:"_blank"},n.createElement("code",null,t))},i=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-provides/index.html"},"@Provides"),a=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-singleton/index.html"},"@Singleton"),c=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-qualifier/index.html"},"@Qualifier"),s=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-named/index.html"},"@Named"),m=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-binds/index.html"},"@Binds"),l=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/start.html"},"Koject.start()"),p=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/-koject/stop.html"},"Koject.stop()"),d=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/inject.html"},"inject()"),u=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject/lazy-inject.html"},"lazyInject()"),h=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras/index.html"},"KojectExtras"),k=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras-message/index.html"},"@KojectExtrasMessage"),y=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject.component/-component-extras/index.html"},"ComponentExtras"),j=()=>n.createElement(r,{href:"/koject-core/com.moriatsushi.koject.error/-missing-extras-exception/index.html"},"MissingExtrasException"),f=()=>n.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/run-test.html"},"Koject.runTest()"),v=()=>n.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/start-test.html"},"Koject.startTest()"),g=()=>n.createElement(r,{href:"/koject-test/com.moriatsushi.koject.test/-test-provides/index.html"},"@TestProvides"),x=()=>n.createElement(r,{href:"/android/koject-android-core/com.moriatsushi.koject.android/application.html"},"application()"),E=()=>n.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html"},"@ViewModelComponent"),b=()=>n.createElement(r,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-coroutine-scope/index.html"},"@ViewModelCoroutineScope"),w=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/inject.html"},"ComponentActivity.inject()"),N=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject/lazy-inject.html"},"ComponentActivity.lazyInject()"),C=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-component/index.html"},"@ActivityComponent"),R=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityContext"),I=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityCoroutineScope"),B=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/lazy-view-models.html"},"ComponentActivity.lazyViewModels()"),D=()=>n.createElement(r,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/inject-view-models.html"},"ComponentActivity.injectViewModels()"),O=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/inject.html"},"Fragment.inject()"),P=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject/lazy-inject.html"},"Fragment.lazyInject()"),T=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-component/index.html"},"@FragmentComponent"),M=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-coroutine-scope/index.html"},"@FragmentCoroutineScope"),A=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-view-coroutine-scope/index.html"},"@FragmentViewCoroutineScope"),q=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/lazy-view-models.html"},"Fragment.lazyViewModels()"),K=()=>n.createElement(r,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html"},"Fragment.injectViewModels()"),z=()=>n.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/remember-inject.html"},"rememberInject()"),Q=()=>n.createElement(r,{href:"/compose/koject-compose-viewmodel/com.moriatsushi.koject.compose.viewmodel/inject-view-model.html"},"injectViewModel()"),S=()=>n.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-component/index.html"},"@ComposeComponent"),V=()=>n.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-coroutine-scope/index.html"},"@ComposeCoroutineScope"),F=()=>n.createElement(r,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-context/index.html"},"@ComposeContext")},9829:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=o(7462),r=(o(7294),o(3905)),i=o(1054);const a={},c="Binds",s={unversionedId:"core/binds",id:"core/binds",title:"Binds",description:"Using the  annotation, it's easy to provide a type as supertypes.",source:"@site/docs/core/binds.mdx",sourceDirName:"core",slug:"/core/binds",permalink:"/koject/docs/core/binds",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/core/binds.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Qualifier",permalink:"/koject/docs/core/qualifier"},next:{title:"KojextExtras (Experimental)",permalink:"/koject/docs/core/extras"}},m={},l=[{value:"Provide as multiple types",id:"provide-as-multiple-types",level:2},{value:"With Qualifier",id:"with-qualifier",level:2}],p={toc:l},d="wrapper";function u(e){let{components:t,...o}=e;return(0,r.kt)(d,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"binds"},"Binds"),(0,r.kt)("p",null,"Using the ",(0,r.kt)(i.NR,{mdxType:"Binds"})," annotation, it's easy to provide a type as supertypes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,r.kt)("p",null,"This is a shortcut for the following implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class RepositoryImpl: Repository\n\ninterface Repository\n\n@Provides\nfun provideRepository(): Repository {\n    return RepositoryImpl()\n}\n")),(0,r.kt)("p",null,"If a type has multiple supertypes, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"to")," parameter to specify the target type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds(to = Type2::class)\n@Provides\nclass Type: Type1, Type2\n\ninterface Type1\ninterface Type2\n")),(0,r.kt)("h2",{id:"provide-as-multiple-types"},"Provide as multiple types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Binds")," can only be used to provide one type and cannot be injected as its original type."),(0,r.kt)("p",null,"For example, given the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,r.kt)("p",null,"You can only inject ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository"),", but not ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl"),".`"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>()\nval repositoryImpl = inject<RepositoryImpl>() // NotProvidedException!\n")),(0,r.kt)("p",null,"To provide one type as multiple types, you can use the ",(0,r.kt)(i.Hc,{mdxType:"Provides"})," annotation."),(0,r.kt)("p",null,"Here is an example that provides both ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass RepositoryImpl: Repository {\n    companion object {\n        @Provides\n        fun provideAsRepository(impl: RepositoryImpl): Repository {\n            return impl\n        }\n    }\n}\n\ninterface Repository\n")),(0,r.kt)("p",null,"You can now inject both ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>() // RepositoryImpl\nval repositoryImpl = inject<RepositoryImpl>() // RepositoryImpl\n")),(0,r.kt)("h2",{id:"with-qualifier"},"With Qualifier"),(0,r.kt)("p",null,"Types may conflict as a result of providing them with supertypes using ",(0,r.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them, you can use ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/qualifier"},"qualifiers"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n\n@ID1\n@Binds\n@Provides\nclass DB1: DB\n\n@ID1\n@Binds\n@Provides\nclass DB2: DB\n\ninterface DB\n")),(0,r.kt)("p",null,"In the example above, both ",(0,r.kt)("inlineCode",{parentName:"p"},"DB1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DB2")," are bound to ",(0,r.kt)("inlineCode",{parentName:"p"},"DB")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them when injecting, qualifiers ",(0,r.kt)("inlineCode",{parentName:"p"},"ID1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ID2")," are used.\nIn this way, you can get the specific instance you need by providing the corresponding qualifier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(ID1()) // DB1\nval db2 = inject<DB>(ID2()) // DB2\n")))}u.isMDXComponent=!0}}]);