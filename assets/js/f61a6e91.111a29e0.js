"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[498],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=a.createContext({}),s=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,f=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return t?a.createElement(f,i(i({ref:n},c),{},{components:t})):a.createElement(f,i({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var u in n)hasOwnProperty.call(n,u)&&(o[u]=n[u]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7216:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>B,contentTitle:()=>R,default:()=>O,frontMatter:()=>w,metadata:()=>Q,toc:()=>A});var a=t(7462),r=t(7294),l=t(3905),i=t(6010),o=t(2466),u=t(6550),s=t(1980),c=t(7392),p=t(12);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function f(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function b(e){let{queryString:n=!1,groupId:t}=e;const a=(0,u.k6)(),l=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const n=new URLSearchParams(a.location.search);n.set(l,e),a.replace({...a.location,search:n.toString()})}),[l,a])]}function v(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,l=m(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!f({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:l}))),[u,s]=b({queryString:t,groupId:a}),[c,d]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,l]=(0,p.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&l.set(e)}),[t,l])]}({groupId:a}),v=(()=>{const e=u??c;return f({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{v&&o(v)}),[v]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),s(e),d(e)}),[s,d,l]),tabValues:l}}var k=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function h(e){let{className:n,block:t,selectedValue:l,selectValue:u,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,o.o5)(),d=e=>{const n=e.currentTarget,t=c.indexOf(n),a=s[t].value;a!==l&&(p(n),u(a))},m=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const t=c.indexOf(e.currentTarget)+1;n=c[t]??c[0];break}case"ArrowLeft":{const t=c.indexOf(e.currentTarget)-1;n=c[t]??c[c.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},s.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:m,onClick:d},o,{className:(0,i.Z)("tabs__item",g.tabItem,o?.className,{"tabs__item--active":l===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=v(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",g.tabList)},r.createElement(h,(0,a.Z)({},e,n)),r.createElement(y,(0,a.Z)({},e,n)))}function I(e){const n=(0,k.Z)();return r.createElement(N,(0,a.Z)({key:String(n)},e))}const D={tabItem:"tabItem_Ymn6"};function T(e){let{children:n,hidden:t,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,i.Z)(D.tabItem,a),hidden:t},n)}const w={},R="Qualifier",Q={unversionedId:"core/qualifier",id:"core/qualifier",title:"Qualifier",description:"You can use the @Qualifier annotation to distinguish between different instances of the same type.",source:"@site/docs/core/qualifier.mdx",sourceDirName:"core",slug:"/core/qualifier",permalink:"/koject/docs/core/qualifier",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/core/qualifier.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Start Koject",permalink:"/koject/docs/core/basic"},next:{title:"Binds",permalink:"/koject/docs/core/binds"}},B={},A=[{value:"Distinguishing with Qualifier members",id:"distinguishing-with-qualifier-members",level:2},{value:"Named annotation",id:"named-annotation",level:2}],E={toc:A},j="wrapper";function O(e){let{components:n,...t}=e;return(0,l.kt)(j,(0,a.Z)({},E,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"qualifier"},"Qualifier"),(0,l.kt)("p",null,"You can use the ",(0,l.kt)("a",{href:"/api/core/com.moriatsushi.koject/-qualifier/index.html",target:"_blank"},(0,l.kt)("inlineCode",{parentName:"p"},"@Qualifier"))," annotation to distinguish between different instances of the same type."),(0,l.kt)("p",null,"First, define the qualifier annotations with ",(0,l.kt)("inlineCode",{parentName:"p"},"@Qualifier"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n")),(0,l.kt)("p",null,"Then, use the annotations to specify the qualifier when providing the instances."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'@ID1\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@ID1\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,l.kt)("p",null,"Finally, use the qualifiers to inject the instances you need."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"class Repository(\n    @ID1\n    val db1: DB,\n    @ID2\n    val db2: DB\n)\n")),(0,l.kt)("p",null,"You can also use qualifier annotations when calling the ",(0,l.kt)("a",{href:"/api/core/com.moriatsushi.koject/inject.html",target:"_blank"},"inject()")," function."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(ID1())\nval db2 = inject<DB>(ID2())\n")),(0,l.kt)("p",null,"This allows you to provide and inject multiple instances of the same type without ambiguity."),(0,l.kt)("h2",{id:"distinguishing-with-qualifier-members"},"Distinguishing with Qualifier members"),(0,l.kt)("p",null,"Qualifier annotations can also have members to further distinguish between instances."),(0,l.kt)("p",null,"For example, you can use the enum class like this:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class QualifierType {\n    ID1,\n    ID2\n}\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class EnumQualifier(val type: QualifierType)\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'@EnumQualifier(QualifierType.ID1)\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@EnumQualifier(QualifierType.ID2)\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(EnumQualifier(QualifierType.ID1))\nval db2 = inject<DB>(EnumQualifier(QualifierType.ID2))\n")),(0,l.kt)("p",null,"The following types can be used as qualifier members:"),(0,l.kt)(I,{mdxType:"Tabs"},(0,l.kt)(T,{value:"number",label:"Number",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class IntQualifier(val value: Int)\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class FloatQualifier(val value: Float)\n"))),(0,l.kt)(T,{value:"boolean",label:"Boolean",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class BooleanQualifier(val value: Boolean)\n"))),(0,l.kt)(T,{value:"char",label:"Char",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class CharQualifier(val value: Char)\n"))),(0,l.kt)(T,{value:"string",label:"String",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class StringQualifier(val value: String)\n"))),(0,l.kt)(T,{value:"kclass",label:"KClass",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ClassQualifier(val value: KClass<*>)\n"))),(0,l.kt)(T,{value:"enums",label:"Enums",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"enum class QualifierType {\n    ID1,\n    ID2\n}\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class EnumQualifier(val type: QualifierType)\n")))),(0,l.kt)("p",null,"The following types are currently not supported:"),(0,l.kt)(I,{mdxType:"Tabs"},(0,l.kt)(T,{value:"annotations",label:"Other annotations",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"annotation class OtherAnnotation(val value: String)\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class AnnotationQualifier(\n    val value: OtherAnnotation // Not supported!\n)\n"))),(0,l.kt)(T,{value:"array",label:"Array (including varargs)",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class StringArrayQualifier(val value: Array<String>) // Not supported!\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class IntArrayQualifier(val value: IntArray) // Not supported!\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class VarargArrayQualifier(vararg val value: Int) // Not supported!\n")))),(0,l.kt)("p",null,"Qualifier members can have multiple values \u200b\u200band can have default values:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class CustomQualifier(\n    val int: Int,\n    val string: String = "default",\n)\n')),(0,l.kt)("h2",{id:"named-annotation"},"Named annotation"),(0,l.kt)("p",null,"You can also use the ",(0,l.kt)("a",{href:"/api/core/com.moriatsushi.koject/-named/index.html",target:"_blank"},(0,l.kt)("inlineCode",{parentName:"p"},"@Named"))," qualifier to distinguish between different instances of the same type based on a string value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'@Named("db1")\n@Provide\nfun provideDB1(): DB {\n    DB.create("id1")\n}\n\n@Named("db2")\n@Provide\nfun provideDB2(): DB {\n    DB.create("id2")\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'class Repository(\n    @Named("db1")\n    val db1: DB,\n    @Named("db2")\n    val db2: DB\n)\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-kotlin"},'val db1 = inject<DB>("db1")\nval db2 = inject<DB>("db2")\n')))}O.isMDXComponent=!0}}]);