"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[893],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return t?o.createElement(y,a(a({ref:n},c),{},{components:t})):o.createElement(y,a({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[u]="string"==typeof e?e:r,a[1]=p;for(var l=2;l<i;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9829:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const i={},a="Binds",p={unversionedId:"core/binds",id:"core/binds",title:"Binds",description:"Using the @Binds annotation, it's easy to provide a type as supertypes.",source:"@site/docs/core/binds.mdx",sourceDirName:"core",slug:"/core/binds",permalink:"/koject/docs/core/binds",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/core/binds.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Qualifier",permalink:"/koject/docs/core/qualifier"},next:{title:"Component (Experimental)",permalink:"/koject/docs/core/component"}},s={},l=[{value:"Provide as multiple types",id:"provide-as-multiple-types",level:2},{value:"With Qualifier",id:"with-qualifier",level:2}],c={toc:l},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"binds"},"Binds"),(0,r.kt)("p",null,"Using the ",(0,r.kt)("a",{href:"/api/core/com.moriatsushi.koject/-binds/index.html",target:"_blank"},"@Binds")," annotation, it's easy to provide a type as supertypes."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,r.kt)("p",null,"This is a shortcut for the following implementation."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"class RepositoryImpl: Repository\n\ninterface Repository\n\n@Provides\nfun provideRepository(): Repository {\n    return RepositoryImpl()\n}\n")),(0,r.kt)("p",null,"If a type has multiple supertypes, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"to")," parameter to specify the target type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds(to = Type2::class)\n@Provides\nclass Type: Type1, Type2\n\ninterface Type1\ninterface Type2\n")),(0,r.kt)("h2",{id:"provide-as-multiple-types"},"Provide as multiple types"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"@Binds")," can only be used to provide one type and cannot be injected as its original type."),(0,r.kt)("p",null,"For example, given the following code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,r.kt)("p",null,"You can only inject ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository"),", but not ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl"),".`"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>()\nval repositoryImpl = inject<RepositoryImpl>() // NotProvidedException!\n")),(0,r.kt)("p",null,"To provide one type as multiple types, you can use the ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/basic#provide-from-functions"},"@Provides")," annotation."),(0,r.kt)("p",null,"Here is an example that provides both ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass RepositoryImpl: Repository {\n    companion object {\n        @Provides\n        fun provideAsRepository(impl: RepositoryImpl): Repository {\n            return impl\n        }\n    }\n}\n\ninterface Repository\n")),(0,r.kt)("p",null,"You can now inject both ",(0,r.kt)("inlineCode",{parentName:"p"},"Repository")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>() // RepositoryImpl\nval repositoryImpl = inject<RepositoryImpl>() // RepositoryImpl\n")),(0,r.kt)("h2",{id:"with-qualifier"},"With Qualifier"),(0,r.kt)("p",null,"Types may conflict as a result of providing them with supertypes using ",(0,r.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them, you can use ",(0,r.kt)("a",{parentName:"p",href:"/docs/core/qualifier"},"qualifiers"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n\n@ID1\n@Binds\n@Provides\nclass DB1: DB\n\n@ID1\n@Binds\n@Provides\nclass DB2: DB\n\ninterface DB\n")),(0,r.kt)("p",null,"In the example above, both ",(0,r.kt)("inlineCode",{parentName:"p"},"DB1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DB2")," are bound to ",(0,r.kt)("inlineCode",{parentName:"p"},"DB")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them when injecting, qualifiers ",(0,r.kt)("inlineCode",{parentName:"p"},"ID1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ID2")," are used.\nIn this way, you can get the specific instance you need by providing the corresponding qualifier."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(ID1()) // DB1\nval db2 = inject<DB>(ID2()) // DB2\n")))}d.isMDXComponent=!0}}]);