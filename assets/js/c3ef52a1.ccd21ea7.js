"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),h=i,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2457:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={slug:"first-stable-release",title:"Hello, Koject v1.0.0",authors:"atsushi",image:"/blog/2023-03-04/ogp.png"},r=void 0,l={permalink:"/koject/blog/first-stable-release",editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/blog/2023-03-04-first-stable-release.md",source:"@site/blog/2023-03-04-first-stable-release.md",title:"Hello, Koject v1.0.0",description:'I have recently released a new DI container library "Koject" for Kotlin Multiplatform.',date:"2023-03-04T00:00:00.000Z",formattedDate:"March 4, 2023",tags:[],readingTime:5.795,hasTruncateMarker:!0,authors:[{name:"Mori Atsushi",title:"Koject owner",url:"https://github.com/Mori-Atsushi",imageURL:"https://github.com/mori-atsushi.png",key:"atsushi"}],frontMatter:{slug:"first-stable-release",title:"Hello, Koject v1.0.0",authors:"atsushi",image:"/blog/2023-03-04/ogp.png"}},s={authorsImageUrls:[void 0]},p=[{value:"Role of a DI Container",id:"role-of-a-di-container",level:2},{value:"Improving Testability with Dependency Injection",id:"improving-testability-with-dependency-injection",level:3},{value:"Improving Reusability with Dependency Injection",id:"improving-reusability-with-dependency-injection",level:3},{value:"Consolidate Dependency Resolution with DI Containers",id:"consolidate-dependency-resolution-with-di-containers",level:3},{value:"Features of Koject",id:"features-of-koject",level:2},{value:"Easy setup with annotations",id:"easy-setup-with-annotations",level:3},{value:"Provide as Singleton",id:"provide-as-singleton",level:4},{value:"Provide as supertype",id:"provide-as-supertype",level:4},{value:"More details",id:"more-details",level:4},{value:"Support for Kotlin Multiplatform",id:"support-for-kotlin-multiplatform",level:3},{value:"Checking the Dependency Graph at Compile Time",id:"checking-the-dependency-graph-at-compile-time",level:3},{value:"Future Plans",id:"future-plans",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6984).Z,width:"1200",height:"420"})),(0,i.kt)("p",null,'I have recently released a new DI container library "',(0,i.kt)("strong",{parentName:"p"},"Koject"),'" for Kotlin Multiplatform.\nIn this article, I will introduce the role of a DI container and the features of "',(0,i.kt)("strong",{parentName:"p"},"Koject"),'".'),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/blog/jp/first-stable-release"},(0,i.kt)("strong",{parentName:"a"},"\u65e5\u672c\u8a9e\u3067\u8aad\u3080 \u2192"))),(0,i.kt)("h2",{id:"role-of-a-di-container"},"Role of a DI Container"),(0,i.kt)("p",null,"To understand the role of a DI Container (Dependency Injection Container), we first need to know about Dependency Injection."),(0,i.kt)("p",null,"Dependency Injection is a technique that improves the testability and reusability of code by injecting dependencies from outside the class."),(0,i.kt)("h3",{id:"improving-testability-with-dependency-injection"},"Improving Testability with Dependency Injection"),(0,i.kt)("p",null,"Let's consider the example of a mobile app that uploads videos.\nThe app selects a video from the local device, uploads it to a server, and displays a notification when the upload is complete."),(0,i.kt)("p",null,"We can implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploadService")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploader")," class to upload the video and the ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," class to display the notification as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class VideoUploadService {\n    fun upload(video: Video) {\n        val result = VideoUploader().upload(video)\n        if (result.isSucceeded) {\n            NotificationManager()\n                .showNotification("Upload complete")\n        } else {\n            NotificationManager()\n                .showNotification("Upload failed")\n        }\n    }\n}\n')),(0,i.kt)("p",null,"In this implementation, the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploadService")," class directly depends on the ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploader")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," classes, as it instantiates them."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploader")," class communicates with the server, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," displays notifications on the device.\nDepending directly on these external classes causes issues during testing, as it triggers communication with the external system, leading to instability and long testing times."),(0,i.kt)("p",null,"Dependency Injection suggests ",(0,i.kt)("strong",{parentName:"p"},"passing these external dependencies from outside the class"),"."),(0,i.kt)("p",null,"We can rewrite the previous example using Dependency Injection as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class VideoUploadService(\n    private val videoUploader: VideoUpaloder,\n    private val notificationManager: NotificationManager,\n) {\n    fun upload(video: Video) {\n        val result = videoUploader.upload(video)\n        if (result.isSucceeded) {\n            notificationManager\n                .showNotification("Upload complete")\n        } else {\n            notificationManager\n                .showNotification("Upload failed")\n        }\n    }\n}\n')),(0,i.kt)("p",null,"We pass the necessary classes through the constructor.\nThis technique is called ",(0,i.kt)("strong",{parentName:"p"},"Constructor Injection"),"."),(0,i.kt)("p",null,"This way, we can write tests by substituting the real ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploader")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," classes with their fake counterparts, which do not communicate with the external system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'class VideoUploadServiceTest {\n    private val videoUploader = \n        FakeVideoUploader()\n    private val notificationManager = \n        FakeNotificationManager()\n    private val videoUploadService =\n        VideoUploadService(videoUploader, notificationManager)\n\n    @Test\n    fun test() {\n        val video = Video("test.mp4")\n        videoUploadService.upload(video)\n        /* ... */\n    }\n}\n')),(0,i.kt)("p",null,"Moreover, following the Dependency Injection approach makes the relationships between classes more explicit. Even without reading the entire code, we can understand that ",(0,i.kt)("strong",{parentName:"p"},"VideoUploadService")," is related to ",(0,i.kt)("strong",{parentName:"p"},"VideoUploader")," and ",(0,i.kt)("strong",{parentName:"p"},"NotificationManager")," by merely looking at the constructor."),(0,i.kt)("h3",{id:"improving-reusability-with-dependency-injection"},"Improving Reusability with Dependency Injection"),(0,i.kt)("p",null,"From the perspective of reusability, Dependency Injection is effective."),(0,i.kt)("p",null,"When implementing the video upload application on both Android and iOS, the method of displaying notifications is different between the two platforms.\nBy passing ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," in the constructor, we only need to replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"NotificationManager")," for Android and iOS, and ",(0,i.kt)("inlineCode",{parentName:"p"},"VideoUploadService")," can be used commonly."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// for Android\nval videoUploadService = VideoUploadService(\n    videoUpaloder = VideoUpaloder(),\n    notificationManager = AndroidNotificationManager(),\n)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// for iOS\nval videoUploadService = VideoUploadService(\n    videoUpaloder = VideoUpaloder(),\n    notificationManager = IOSNotificationManager(),\n)\n")),(0,i.kt)("p",null,"By following the Dependency Injection pattern, ",(0,i.kt)("strong",{parentName:"p"},"we can use the same code")," for different platforms and use cases."),(0,i.kt)("h3",{id:"consolidate-dependency-resolution-with-di-containers"},"Consolidate Dependency Resolution with DI Containers"),(0,i.kt)("p",null,"As mentioned earlier, Dependency Injection has several benefits. However, each class needs to specify all of its dependencies when used, and as the number of dependencies increases, creating instances becomes more difficult."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val storageApi = StorageApi(Dispatchers.IO)\nval videoUpaloder = VideoUpaloder(storageApi)\nval notificationManager = NotificationManager(context)\nval videoUploadService = VideoUploadService(\n    videoUpaloder,\n    notificationManager,\n)\n")),(0,i.kt)("p",null,"This is where DI containers come in handy. A DI container has the ability to automatically organize the necessary dependencies and create instances."),(0,i.kt)("p",null,"With Koject, we can register classes to the DI container by adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation when declaring the class, and then use the ",(0,i.kt)("inlineCode",{parentName:"p"},"inject()")," function to obtain an instance with resolved dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass VideoUpaloder\n\n@Provides\nclass NotificationManager\n\n@Provides\nclass VideoUploadService(\n    private val videoUploader: VideoUpaloder,\n    private val notificationManager: NotificationManager,\n) {\n    /* ... */\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"Koject.start()\n\nval videoUploadService = inject<VideoUploadService>()\n")),(0,i.kt)("p",null,"By using Koject, we can reap the benefits of Dependency Injection without writing complex code."),(0,i.kt)("h2",{id:"features-of-koject"},"Features of Koject"),(0,i.kt)("p",null,"Koject is a new DI container library for Kotlin Multiplatform. Here are some of its main features."),(0,i.kt)("h3",{id:"easy-setup-with-annotations"},"Easy setup with annotations"),(0,i.kt)("p",null,"Koject can be easily used with multiple annotations."),(0,i.kt)("p",null,"By adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation to the class declaration, you can register it to the DI container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass Repository\n\n@Provides\nclass Controller(\n    private val repository: Repository\n)\n")),(0,i.kt)("p",null,"After calling ",(0,i.kt)("inlineCode",{parentName:"p"},"Koject.start()"),", you can obtain the instance of the registered class using the ",(0,i.kt)("inlineCode",{parentName:"p"},"inject()")," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"fun main() {\n    Koject.start()\n\n    val controller = inject<Controller>()\n}\n")),(0,i.kt)("p",null,"In this case, calling ",(0,i.kt)("inlineCode",{parentName:"p"},"inject<Controller>()")," will create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Controller")," class using the primary constructor of Controller and the dependency with the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation, which is provided by Koject."),(0,i.kt)("h4",{id:"provide-as-singleton"},"Provide as Singleton"),(0,i.kt)("p",null,"By adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Singleton")," annotation in addition to the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Provides")," annotation, you can limit the creation of instances to only once and reuse them throughout the application.\nThis is especially useful for dependencies that are costly to create or that need to be shared among multiple classes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Singleton\n@Provides\nclass Api\n\n@Singleton\n@Provides\nclass Repository(\n    private val api: Api,\n)\n")),(0,i.kt)("p",null,"In this case, Koject will create only one instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Api")," class and ",(0,i.kt)("inlineCode",{parentName:"p"},"Repository"),", and reuse them throughout the application."),(0,i.kt)("h4",{id:"provide-as-supertype"},"Provide as supertype"),(0,i.kt)("p",null,"When practicing the DI pattern, the implementation class is often used as a superclass such as an interface.\nWith Koject, you can easily provide it as a supertype by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Binds")," annotation."),(0,i.kt)("p",null,"The following example shows how to provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," as a ",(0,i.kt)("inlineCode",{parentName:"p"},"Repository")," using the ",(0,i.kt)("inlineCode",{parentName:"p"},"@Binds")," annotation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,i.kt)("h4",{id:"more-details"},"More details"),(0,i.kt)("p",null,"For more detailed usage, please refer to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/basic"},"documentation"),"."),(0,i.kt)("h3",{id:"support-for-kotlin-multiplatform"},"Support for Kotlin Multiplatform"),(0,i.kt)("p",null,"Koject supports Kotlin Multiplatform, allowing you to create dependency graphs for each platform and even swap classes depending on the platform."),(0,i.kt)("p",null,"Check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/setup"},"setup instructions")," specific to each platform."),(0,i.kt)("h3",{id:"checking-the-dependency-graph-at-compile-time"},"Checking the Dependency Graph at Compile Time"),(0,i.kt)("p",null,"Koject works by generating code using ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/google/ksp"},"KSP"),".\nThe dependency graph is generated at compile time, and if there are any missing dependencies or duplicate providers, the compile process will fail with an error. This helps prevent unexpected errors at runtime."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// No @Provides annotation\nclass Repository\n\n@Provides\nclass Controller(\n    private val repository: Repository\n)\n")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8053).Z,width:"2034",height:"798"})),(0,i.kt)("p",null,"Note that currently Koject does not check whether the class being called with ",(0,i.kt)("inlineCode",{parentName:"p"},"inject()")," has been provided, which can lead to runtime errors like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"// No @Provides annotation\nclass SampleClass\n\nfun main() {\n    Koject.start()\n\n    val controller = inject<SampleClass>() // NotProvidedException!!\n}\n")),(0,i.kt)("h2",{id:"future-plans"},"Future Plans"),(0,i.kt)("p",null,"Koject has just been born, and in order to make it a more convenient library, I plan to enhance the following support in the future:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enhancing support for Android ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Mori-Atsushi/koject/issues/25"},"#25")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Mori-Atsushi/koject/issues/52"},"#52")),(0,i.kt)("li",{parentName:"ul"},"Enhancing support for testing ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Mori-Atsushi/koject/issues/85"},"#85"))),(0,i.kt)("p",null,"If you notice anything else, please send us your feedback on the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Mori-Atsushi/koject/issues"},"Issue page"),"."))}u.isMDXComponent=!0},6984:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/banner-82fce1ffb6da2be4ae59894934664da1.png"},8053:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/compile-error-b6b8a171efb9782288a9c241e2dcaea3.png"}}]);