"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[855],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>v});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=o.createContext({}),c=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=c(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,v=p["".concat(d,".").concat(u)]||p[u]||m[u]||a;return n?o.createElement(v,r(r({ref:t},s),{},{components:n})):o.createElement(v,r({ref:t},s))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<a;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2730:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var o=n(7462),i=(n(7294),n(3905));const a={},r="Inject ViewModels",l={unversionedId:"android/viewmodel",id:"android/viewmodel",title:"Inject ViewModels",description:"Koject supports providing ViewModels.",source:"@site/docs/android/viewmodel.mdx",sourceDirName:"android",slug:"/android/viewmodel",permalink:"/koject/docs/android/viewmodel",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/android/viewmodel.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Android",permalink:"/koject/docs/android/"},next:{title:"Compose",permalink:"/koject/docs/compose/"}},d={},c=[{value:"Setup for ViewModels",id:"setup-for-viewmodels",level:2},{value:"Using ViewModels",id:"using-viewmodels",level:2},{value:"Working with SavedStateHandle",id:"working-with-savedstatehandle",level:2}],s={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"inject-viewmodels"},"Inject ViewModels"),(0,i.kt)("p",null,"Koject supports providing ",(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/ViewModel"},"ViewModels"),"."),(0,i.kt)("admonition",{title:"LINK",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Check the ",(0,i.kt)("a",{parentName:"p",href:"/docs/compose/viewmodel"},"documentation")," to inject ViewModels in Jetpack Compose.")),(0,i.kt)("h2",{id:"setup-for-viewmodels"},"Setup for ViewModels"),(0,i.kt)("p",null,"Add dependencies according to the target to inject."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // Inject ViewModel into Activity\n    implementation("com.moriatsushi.koject:koject-android-activity:1.1.0-beta01")\n    // Inject ViewModel into Fragment\n    implementation("com.moriatsushi.koject:koject-android-fragment:1.1.0-beta01")\n    // ViewModelFactory only\n    implementation("com.moriatsushi.koject:koject-android-viewmodel:1.1.0-beta01")\n}\n')),(0,i.kt)("p",null,"Please also check the ",(0,i.kt)("a",{parentName:"p",href:"/docs/setup"},"Setup document"),"."),(0,i.kt)("h2",{id:"using-viewmodels"},"Using ViewModels"),(0,i.kt)("p",null,"Specify the ",(0,i.kt)("a",{href:"/api/android/viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html",target:"_blank"},(0,i.kt)("inlineCode",{parentName:"p"},"@ViewModelComponent"))," and ",(0,i.kt)("a",{href:"/api/core/com.moriatsushi.koject/-provides/index.html",target:"_blank"},(0,i.kt)("inlineCode",{parentName:"p"},"@Provides"))," annotations when defining a ViewModel.\nAs with other providing types, constructor injection is available."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\n@ViewModelComponent\nclass TopViewModel(\n    private val userRepository: UserRepository,\n    private val contentRepository: ContentRepository,\n): ViewModel() {\n    /* ... */\n}\n")),(0,i.kt)("p",null,"When using ViewModels, use the ",(0,i.kt)("a",{href:"/api/android/activity/com.moriatsushi.koject.android.activity/inject-view-models.html",target:"_blank"},(0,i.kt)("inlineCode",{parentName:"p"},"ComponentActivity.injectViewModels()"))," method."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopActivity : ComponentActivity() {\n    private val viewModel: TopViewModel by injectViewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        /* ... */\n    }\n}\n")),(0,i.kt)("p",null,"When injecting into Fragment, use ",(0,i.kt)("a",{href:"/api/android/fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html",target:"_blank"},(0,i.kt)("inlineCode",{parentName:"p"},"Fragment.injectViewModels()"))," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopFragment : Fragment() {\n    private val viewModel: TopViewModel by injectViewModels()\n\n    override fun onCreateView(\n        inflater: LayoutInflater,\n        container: ViewGroup?,\n        savedInstanceState: Bundle?,\n    ): View? {\n        /* ... */\n    }\n}\n")),(0,i.kt)("h2",{id:"working-with-savedstatehandle"},"Working with SavedStateHandle"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://developer.android.com/reference/androidx/lifecycle/SavedStateHandle"},"SavedStateHandle")," is used to save ViewModel state.\nKoject allows you to inject SavedStateHandle out of the box."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\n@ViewModelComponent\nclass SavedStateViewModel(\n    private val savedStateHandle: SavedStateHandle\n) : ViewModel() {\n    /* ... */\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class TopActivity : ComponentActivity() {\n    private val viewModel: SavedStateViewModel by injectViewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        /* ... */\n    }\n}\n")))}m.isMDXComponent=!0}}]);