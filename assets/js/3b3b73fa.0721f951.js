"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[893],{3905:(e,t,o)=>{o.d(t,{Zo:()=>m,kt:()=>h});var n=o(7294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},m=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=l(o),u=i,h=p["".concat(s,".").concat(u)]||p[u]||d[u]||r;return o?n.createElement(h,a(a({ref:t},m),{},{components:o})):n.createElement(h,a({ref:t},m))}));function h(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,a=new Array(r);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<r;l++)a[l]=o[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},1054:(e,t,o)=>{o.d(t,{BQ:()=>O,E:()=>f,GU:()=>A,Hc:()=>r,IQ:()=>N,Kj:()=>M,N8:()=>Q,NR:()=>l,O$:()=>R,Or:()=>v,Pc:()=>u,Q4:()=>T,TD:()=>x,UK:()=>B,Vi:()=>q,Zf:()=>s,_P:()=>m,dK:()=>D,eG:()=>a,eh:()=>C,f3:()=>y,kJ:()=>b,m:()=>d,oX:()=>w,pn:()=>I,pt:()=>k,q:()=>c,q0:()=>P,ql:()=>h,s7:()=>z,tB:()=>p,tQ:()=>j,wn:()=>g,yc:()=>E});var n=o(7294);const i=e=>{let{children:t,href:o}=e;return n.createElement("a",{href:`/koject/api${o}`,target:"_blank"},n.createElement("code",null,t))},r=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/-provides/index.html"},"@Provides"),a=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/-singleton/index.html"},"@Singleton"),c=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/-qualifier/index.html"},"@Qualifier"),s=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/-named/index.html"},"@Named"),l=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/-binds/index.html"},"@Binds"),m=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/start.html"},"Koject.start()"),p=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/inject.html"},"inject()"),d=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject/lazy-inject.html"},"lazyInject()"),u=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras/index.html"},"KojectExtras"),h=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject.extras/-koject-extras-message/index.html"},"@KojectExtrasMessage"),k=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject.component/-component-extras/index.html"},"ComponentExtras"),y=()=>n.createElement(i,{href:"/koject-core/com.moriatsushi.koject.error/-missing-extras-exception/index.html"},"MissingExtrasException"),f=()=>n.createElement(i,{href:"/android/koject-android-core/com.moriatsushi.koject.android/application.html"},"application()"),j=()=>n.createElement(i,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-component/index.html"},"@ViewModelComponent"),v=()=>n.createElement(i,{href:"/android/koject-android-viewmodel/com.moriatsushi.koject.android.viewmodel/-view-model-coroutine-scope/index.html"},"@ViewModelCoroutineScope"),g=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject/inject.html"},"ComponentActivity.inject()"),x=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject/lazy-inject.html"},"ComponentActivity.lazyInject()"),E=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-component/index.html"},"@ActivityComponent"),b=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityContext"),w=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/-activity-context/index.html"},"@ActivityCoroutineScope"),N=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/lazy-view-models.html"},"ComponentActivity.lazyViewModels()"),C=()=>n.createElement(i,{href:"/android/koject-android-activity/com.moriatsushi.koject.android.activity/inject-view-models.html"},"ComponentActivity.injectViewModels()"),R=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject/inject.html"},"Fragment.inject()"),I=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject/lazy-inject.html"},"Fragment.lazyInject()"),B=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-component/index.html"},"@FragmentComponent"),D=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-coroutine-scope/index.html"},"@FragmentCoroutineScope"),O=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/-fragment-view-coroutine-scope/index.html"},"@FragmentViewCoroutineScope"),P=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/lazy-view-models.html"},"Fragment.lazyViewModels()"),T=()=>n.createElement(i,{href:"/android/koject-android-fragment/com.moriatsushi.koject.android.fragment/inject-view-models.html"},"Fragment.injectViewModels()"),M=()=>n.createElement(i,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/remember-inject.html"},"rememberInject()"),A=()=>n.createElement(i,{href:"/compose/koject-compose-viewmodel/com.moriatsushi.koject.compose.viewmodel/inject-view-model.html"},"injectViewModel()"),q=()=>n.createElement(i,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-component/index.html"},"@ComposeComponent"),z=()=>n.createElement(i,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-coroutine-scope/index.html"},"@ComposeCoroutineScope"),Q=()=>n.createElement(i,{href:"/compose/koject-compose-core/com.moriatsushi.koject.compose/-compose-context/index.html"},"@ComposeContext")},9829:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>m});var n=o(7462),i=(o(7294),o(3905)),r=o(1054);const a={},c="Binds",s={unversionedId:"core/binds",id:"core/binds",title:"Binds",description:"Using the  annotation, it's easy to provide a type as supertypes.",source:"@site/docs/core/binds.mdx",sourceDirName:"core",slug:"/core/binds",permalink:"/koject/docs/core/binds",draft:!1,editUrl:"https://github.com/Mori-Atsushi/koject/tree/main/docs/docs/core/binds.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Qualifier",permalink:"/koject/docs/core/qualifier"},next:{title:"KojextExtras (Experimental)",permalink:"/koject/docs/core/extras"}},l={},m=[{value:"Provide as multiple types",id:"provide-as-multiple-types",level:2},{value:"With Qualifier",id:"with-qualifier",level:2}],p={toc:m},d="wrapper";function u(e){let{components:t,...o}=e;return(0,i.kt)(d,(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"binds"},"Binds"),(0,i.kt)("p",null,"Using the ",(0,i.kt)(r.NR,{mdxType:"Binds"})," annotation, it's easy to provide a type as supertypes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,i.kt)("p",null,"This is a shortcut for the following implementation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class RepositoryImpl: Repository\n\ninterface Repository\n\n@Provides\nfun provideRepository(): Repository {\n    return RepositoryImpl()\n}\n")),(0,i.kt)("p",null,"If a type has multiple supertypes, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"to")," parameter to specify the target type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds(to = Type2::class)\n@Provides\nclass Type: Type1, Type2\n\ninterface Type1\ninterface Type2\n")),(0,i.kt)("h2",{id:"provide-as-multiple-types"},"Provide as multiple types"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@Binds")," can only be used to provide one type and cannot be injected as its original type."),(0,i.kt)("p",null,"For example, given the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Binds\n@Provides\nclass RepositoryImpl: Repository\n\ninterface Repository\n")),(0,i.kt)("p",null,"You can only inject ",(0,i.kt)("inlineCode",{parentName:"p"},"Repository"),", but not ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryImpl"),".`"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>()\nval repositoryImpl = inject<RepositoryImpl>() // NotProvidedException!\n")),(0,i.kt)("p",null,"To provide one type as multiple types, you can use the ",(0,i.kt)(r.Hc,{mdxType:"Provides"})," annotation."),(0,i.kt)("p",null,"Here is an example that provides both ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Repository"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Provides\nclass RepositoryImpl: Repository {\n    companion object {\n        @Provides\n        fun provideAsRepository(impl: RepositoryImpl): Repository {\n            return impl\n        }\n    }\n}\n\ninterface Repository\n")),(0,i.kt)("p",null,"You can now inject both ",(0,i.kt)("inlineCode",{parentName:"p"},"Repository")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RepositoryImpl")," respectively."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val repository = inject<Repository>() // RepositoryImpl\nval repositoryImpl = inject<RepositoryImpl>() // RepositoryImpl\n")),(0,i.kt)("h2",{id:"with-qualifier"},"With Qualifier"),(0,i.kt)("p",null,"Types may conflict as a result of providing them with supertypes using ",(0,i.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them, you can use ",(0,i.kt)("a",{parentName:"p",href:"/docs/core/qualifier"},"qualifiers"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID1\n\n@Qualifier\n@Retention(AnnotationRetention.BINARY)\nannotation class ID2\n\n@ID1\n@Binds\n@Provides\nclass DB1: DB\n\n@ID1\n@Binds\n@Provides\nclass DB2: DB\n\ninterface DB\n")),(0,i.kt)("p",null,"In the example above, both ",(0,i.kt)("inlineCode",{parentName:"p"},"DB1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"DB2")," are bound to ",(0,i.kt)("inlineCode",{parentName:"p"},"DB")," using ",(0,i.kt)("inlineCode",{parentName:"p"},"@Binds"),".\nTo distinguish between them when injecting, qualifiers ",(0,i.kt)("inlineCode",{parentName:"p"},"ID1")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ID2")," are used.\nIn this way, you can get the specific instance you need by providing the corresponding qualifier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"val db1 = inject<DB>(ID1()) // DB1\nval db2 = inject<DB>(ID2()) // DB2\n")))}u.isMDXComponent=!0}}]);