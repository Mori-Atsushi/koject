package com.moriatsushi.koject.processor

import com.moriatsushi.koject.internal.StringIdentifier
import com.moriatsushi.koject.processor.assert.assertCompileSucceed
import com.moriatsushi.koject.processor.assert.assertFileExists
import com.moriatsushi.koject.processor.assert.assertFileTextEquals
import com.moriatsushi.koject.processor.compiletesting.KotlinCompilationFactory
import com.moriatsushi.koject.processor.symbol.asCodeName
import com.tschuchort.compiletesting.SourceFile
import java.io.File
import org.intellij.lang.annotations.Language
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder

class DIProcessorQualifierWithMembersTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private val compilationFactory = KotlinCompilationFactory()
    private lateinit var folder: File

    @Before
    fun setup() {
        folder = tempFolder.newFolder()
    }

    @Test
    fun compile() {
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(inputCode)
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedID1FactoryFile = folder.resolve(expectedID1FactoryFilePath)
        assertFileExists(expectedID1FactoryFile)
        assertFileTextEquals(expectedID1FactoryText, expectedID1FactoryFile)

        val expectedClassFactoryFile = folder.resolve(expectedClassFactoryFilePath)
        assertFileExists(expectedClassFactoryFile)
        assertFileTextEquals(expectedClassFactoryText, expectedClassFactoryFile)

        val expectedFunctionFactoryFile = folder.resolve(expectedFunctionFactoryFilePath)
        assertFileExists(expectedFunctionFactoryFile)
        assertFileTextEquals(expectedFunctionFactoryText, expectedFunctionFactoryFile)
    }

    private val inputCode = SourceFile.kotlin(
        "Test.kt",
        """
                package com.testpackage

                import com.moriatsushi.koject.Provides
                import com.moriatsushi.koject.Qualifier

                @Qualifier
                @Retention(AnnotationRetention.BINARY)
                annotation class EnumQualifier(val enum: QualifierEnum)

                enum class QualifierEnum {
                    ID1,
                    ID2
                }

                @EnumQualifier(QualifierEnum.ID1)
                @Provides
                fun provideString1(): String {
                    return "id1"
                }

                @EnumQualifier(QualifierEnum.ID2)
                @Provides
                fun provideString1(): String {
                    return "id2"
                }

                @Provides
                class SampleClass(
                    @EnumQualifier(QualifierEnum.ID1)
                    private val string1: String,
                    @EnumQualifier(QualifierEnum.ID2)
                    private val string2: String,
                )

                @EnumQualifier(QualifierEnum.ID1)
                @Provides
                fun provideSampleClass(
                    @EnumQualifier(QualifierEnum.ID1) string1: String,
                    @EnumQualifier(QualifierEnum.ID2) string2: String,
                ): SampleClass {
                    return SampleClass(
                        string1 + "by-id1",
                        string2 + "by-id1",
                    )
                }
            """,
    )

    private val expectedID1Identifier = StringIdentifier(
        "kotlin.String",
        "com.testpackage.EnumQualifier(enum = com.testpackage.QualifierEnum.ID1)",
    )
    private val expectedID2Identifier = StringIdentifier(
        "kotlin.String",
        "com.testpackage.EnumQualifier(enum = com.testpackage.QualifierEnum.ID2)",
    )

    private val expectedID1FactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_${expectedID1Identifier.asCodeName()}_Factory.kt"

    private val expectedClassFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleClass_Factory.kt"

    private val expectedFunctionIdentifier = StringIdentifier(
        "com.testpackage.SampleClass",
        "com.testpackage.EnumQualifier(enum = com.testpackage.QualifierEnum.ID1)",
    )
    private val expectedFunctionFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_${expectedFunctionIdentifier.asCodeName()}_Factory.kt"

    private val expectedID1FactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.EnumQualifier
        |import com.testpackage.QualifierEnum
        |import com.testpackage.provideString1
        |import kotlin.Any
        |import kotlin.String
        |
        |@InternalKojectApi
        |@StringIdentifier(
        |    "${expectedID1Identifier.type}",
        |    "${expectedID1Identifier.qualifier}",
        |)
        |@Location("${folder.path}/sources/Test.kt:17")
        |public class _kotlin_String__qWa2qxo1MEvyXwkR_Factory() {
        |    public fun create(): Any = provideString1()
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<String>(
        |                    EnumQualifier(enum = QualifierEnum.ID1)
        |                )
        |    }
        |}
        |
        """.trimMargin()

    private val expectedClassFactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.SampleClass
        |import kotlin.Any
        |import kotlin.String
        |
        |@InternalKojectApi
        |@StringIdentifier("com.testpackage.SampleClass")
        |@Location("${folder.path}/sources/Test.kt:28")
        |public class _com_testpackage_SampleClass_Factory(
        |    @StringIdentifier(
        |        "${expectedID1Identifier.type}",
        |        "${expectedID1Identifier.qualifier}",
        |    )
        |    @Location("${folder.path}/sources/Test.kt:30")
        |    private val provide_${expectedID1Identifier.asCodeName()}: () -> Any,
        |    @StringIdentifier(
        |        "${expectedID2Identifier.type}",
        |        "${expectedID2Identifier.qualifier}",
        |    )
        |    @Location("${folder.path}/sources/Test.kt:32")
        |    private val provide_${expectedID2Identifier.asCodeName()}: () -> Any,
        |) {
        |    public fun create(): Any = SampleClass(
        |        provide_${expectedID1Identifier.asCodeName()}() as String,
        |        provide_${expectedID2Identifier.asCodeName()}() as String,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass>()
        |    }
        |}
        |
        """.trimMargin()

    private val expectedFunctionFactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.EnumQualifier
        |import com.testpackage.QualifierEnum
        |import com.testpackage.SampleClass
        |import com.testpackage.provideSampleClass
        |import kotlin.Any
        |import kotlin.String
        |
        |@InternalKojectApi
        |@StringIdentifier(
        |    "${expectedFunctionIdentifier.type}",
        |    "${expectedFunctionIdentifier.qualifier}",
        |)
        |@Location("${folder.path}/sources/Test.kt:37")
        |public class _com_testpackage_SampleClass__qWa2qxo1MEvyXwkR_Factory(
        |    @StringIdentifier(
        |        "${expectedID1Identifier.type}",
        |        "${expectedID1Identifier.qualifier}",
        |    )
        |    @Location("${folder.path}/sources/Test.kt:38")
        |    private val provide_kotlin_String__qWa2qxo1MEvyXwkR: () -> Any,
        |    @StringIdentifier(
        |        "${expectedID2Identifier.type}",
        |        "${expectedID2Identifier.qualifier}",
        |    )
        |    @Location("${folder.path}/sources/Test.kt:39")
        |    private val provide_kotlin_String__FNY6AOVynHWo6Pm3: () -> Any,
        |) {
        |    public fun create(): Any = provideSampleClass(
        |        provide_kotlin_String__qWa2qxo1MEvyXwkR() as String,
        |        provide_kotlin_String__FNY6AOVynHWo6Pm3() as String,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass>(
        |                    EnumQualifier(enum = QualifierEnum.ID1)
        |                )
        |    }
        |}
        |
        """.trimMargin()
}
