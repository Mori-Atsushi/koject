package com.moriatsushi.koject.processor

import com.moriatsushi.koject.processor.assert.assertCompileSucceed
import com.moriatsushi.koject.processor.assert.assertFileExists
import com.moriatsushi.koject.processor.assert.assertFileTextEquals
import com.moriatsushi.koject.processor.compiletesting.KotlinCompilationFactory
import com.tschuchort.compiletesting.SourceFile
import java.io.File
import org.intellij.lang.annotations.Language
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder

class DIProcessorProviderObjectTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private val compilationFactory = KotlinCompilationFactory()
    private lateinit var folder: File

    @Before
    fun setup() {
        folder = tempFolder.newFolder()
    }

    @Test
    fun compile() {
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(inputCode)
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedIntFactoryFile = folder.resolve(expectedIntFactoryFilePath)
        assertFileExists(expectedIntFactoryFile)
        assertFileTextEquals(expectedIntFactoryText, expectedIntFactoryFile)

        val expectedClassFactoryFile = folder.resolve(expectedClassFactoryFilePath)
        assertFileExists(expectedClassFactoryFile)
        assertFileTextEquals(expectedClassFactoryText, expectedClassFactoryFile)
    }

    private val inputCode = SourceFile.kotlin(
        "Test.kt",
        """
                package com.testpackage

                import com.moriatsushi.koject.Provides

                object ProviderObject {
                    @Provides
                    fun provideInt(): Int {
                        return 123
                    }
                
                    @Provides
                    fun provideWithParameters(
                        int: Int,
                    ): ProviderObjectWithParameters {
                        return ProviderObjectWithParameters(
                            int = int,
                        )
                    }
                }

                data class ProviderObjectWithParameters(
                    val int: Int,
                )
                """,
    )

    private val expectedIntFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_kotlin_Int_Factory.kt"

    private val expectedClassFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_ProviderObjectWithParameters_Factory.kt"

    private val expectedIntFactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.ProviderObject
        |import com.testpackage.ProviderObject.provideInt
        |import kotlin.Any
        |import kotlin.Int
        |
        |@InternalKojectApi
        |@StringIdentifier("kotlin.Int")
        |@Location("${folder.path}/sources/Test.kt:7")
        |public class _kotlin_Int_Factory() {
        |    public fun create(): Any = ProviderObject.provideInt()
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<Int>()
        |    }
        |}
        |
        """.trimMargin()

    private val expectedClassFactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.ProviderObject
        |import com.testpackage.ProviderObject.provideWithParameters
        |import com.testpackage.ProviderObjectWithParameters
        |import kotlin.Any
        |import kotlin.Int
        |
        |@InternalKojectApi
        |@StringIdentifier("com.testpackage.ProviderObjectWithParameters")
        |@Location("${folder.path}/sources/Test.kt:12")
        |public class _com_testpackage_ProviderObjectWithParameters_Factory(
        |    @StringIdentifier("kotlin.Int")
        |    @Location("${folder.path}/sources/Test.kt:13")
        |    private val provide_kotlin_Int: () -> Any,
        |) {
        |    public fun create(): Any = ProviderObject.provideWithParameters(
        |        provide_kotlin_Int() as Int,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<ProviderObjectWithParameters>()
        |    }
        |}
        |
        """.trimMargin()
}
