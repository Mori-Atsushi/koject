package com.moriatsushi.koject.processor

import com.moriatsushi.koject.processor.assert.assertCompileSucceed
import com.moriatsushi.koject.processor.assert.assertFileExists
import com.moriatsushi.koject.processor.assert.assertFileTextEquals
import com.moriatsushi.koject.processor.compiletesting.KotlinCompilationFactory
import com.tschuchort.compiletesting.SourceFile
import org.intellij.lang.annotations.Language
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder

class DIProcessorMultimoduleTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private val compilationFactory = KotlinCompilationFactory()

    @Test
    fun compile() {
        val folder = tempFolder.newFolder()
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(
            libModuleCode,
            libModuleGeneratedCode,
            appModuleCode,
        )
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedClass2FactoryFile = folder.resolve(expectedClass2FactoryFilePath)
        assertFileExists(expectedClass2FactoryFile)

        val expectedContainerFile = folder.resolve(expectedContainerFilePath)
        assertFileExists(expectedContainerFile)
        assertFileTextEquals(expectedContainerText, expectedContainerFile)
    }

    @Test
    fun compileLibraryOnly() {
        val folder = tempFolder.newFolder()
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(
            libModuleCode,
            libModuleGeneratedCode,
        )
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedContainerFile = folder.resolve(expectedContainerFilePath)
        assertFileExists(expectedContainerFile)
        assertFileTextEquals(expectedLibraryOnlyContainerText, expectedContainerFile)
    }

    private val libModuleCode = SourceFile.kotlin(
        "SampleClass1.kt",
        """
                package com.lib

                // Since it is assumed that it has already been processed,
                // @Provides annotation is not attached.
                class SampleClass1
            """,
    )

    private val libModuleGeneratedCode = SourceFile.kotlin(
        "_com_testpackage_SampleClass1_Factory.kt",
        """
                // Generated by Koject. Do not modify!
                package com.moriatsushi.koject.generated.factory
                
                import com.moriatsushi.koject.`internal`.InternalKojectApi
                import com.moriatsushi.koject.`internal`.identifier.AssistantID
                import kotlin.Any
                
                @InternalKojectApi
                @AssistantID("com.lib.SampleClass1")
                public class _com_lib_SampleClass1_Factory() {
                    public fun create(): Any = com.lib.SampleClass1(
                    )
                }
            """,
    )

    private val appModuleCode = SourceFile.kotlin(
        "SampleClass2.kt",
        """
                package com.app

                import com.lib.SampleClass1
                import com.moriatsushi.koject.Provides

                @Provides
                class SampleClass2(
                    private val sampleClass1: SampleClass1
                )
            """,
    )

    private val expectedClass2FactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_app_SampleClass2_Factory.kt"

    private val expectedContainerFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/" +
            "_AppContainer.kt"

    @Language("kotlin")
    private val expectedContainerText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated
        |
        |import com.moriatsushi.koject.`internal`.Container
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.generated.factory._com_app_SampleClass2_Factory
        |import com.moriatsushi.koject.generated.factory._com_lib_SampleClass1_Factory
        |import kotlin.Any
        |
        |@InternalKojectApi
        |public class _AppContainer : Container {
        |    private fun provide_com_app_SampleClass2(): Any = _com_app_SampleClass2_Factory(
        |    ::provide_com_lib_SampleClass1
        |    ).create()
        |
        |    private fun provide_com_lib_SampleClass1(): Any = _com_lib_SampleClass1_Factory(
        |    ).create()
        |
        |    public override fun resolve(id: Identifier): Any = when (id) {
        |        _com_app_SampleClass2_Factory.identifier -> provide_com_app_SampleClass2()
        |        _com_lib_SampleClass1_Factory.identifier -> provide_com_lib_SampleClass1()
        |        else -> error("not provided:${'$'}id")
        |    }
        |}
        |
    """.trimMargin()

    @Language("kotlin")
    private val expectedLibraryOnlyContainerText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated
        |
        |import com.moriatsushi.koject.`internal`.Container
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.generated.factory._com_lib_SampleClass1_Factory
        |import kotlin.Any
        |
        |@InternalKojectApi
        |public class _AppContainer : Container {
        |    private fun provide_com_lib_SampleClass1(): Any = _com_lib_SampleClass1_Factory(
        |    ).create()
        |
        |    public override fun resolve(id: Identifier): Any = when (id) {
        |        _com_lib_SampleClass1_Factory.identifier -> provide_com_lib_SampleClass1()
        |        else -> error("not provided:${'$'}id")
        |    }
        |}
        |
    """.trimMargin()
}
