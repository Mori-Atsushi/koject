package com.moriatsushi.koject.processor

import com.moriatsushi.koject.processor.assert.assertCompileSucceed
import com.moriatsushi.koject.processor.assert.assertFileExists
import com.moriatsushi.koject.processor.assert.assertFileTextEquals
import com.moriatsushi.koject.processor.compiletesting.KotlinCompilationFactory
import com.tschuchort.compiletesting.SourceFile
import java.io.File
import org.intellij.lang.annotations.Language
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder

class DIProcessorTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private val compilationFactory = KotlinCompilationFactory()
    private lateinit var folder: File

    @Before
    fun setup() {
        folder = tempFolder.newFolder()
    }

    @Test
    fun compile() {
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(inputCode)
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedClass1FactoryFile = folder.resolve(expectedClass1FactoryFilePath)
        assertFileExists(expectedClass1FactoryFile)
        assertFileTextEquals(expectedClass1FactoryText, expectedClass1FactoryFile)

        val expectedClass2FactoryFile = folder.resolve(expectedClass2FactoryFilePath)
        assertFileExists(expectedClass2FactoryFile)
        assertFileTextEquals(expectedClass2FactoryText, expectedClass2FactoryFile)

        val expectedClass3FactoryFile = folder.resolve(expectedClass3FactoryFilePath)
        assertFileExists(expectedClass3FactoryFile)
        assertFileTextEquals(expectedClass3FactoryText, expectedClass3FactoryFile)

        val expectedContainerFile = folder.resolve(expectedContainerFilePath)
        assertFileExists(expectedContainerFile)
        assertFileTextEquals(expectedContainerText, expectedContainerFile)

        val expectedStartFile = folder.resolve(expectedStartFilePath)
        assertFileExists(expectedStartFile)
        assertFileTextEquals(expectedStartText, expectedStartFile)
    }

    private val inputCode = SourceFile.kotlin(
        "Test.kt",
        """
                package com.testpackage

                import com.moriatsushi.koject.Provides

                @Provides
                class SampleClass1

                @Provides
                class SampleClass2(
                    private val sampleClass1: SampleClass1
                )

                @Provides
                class SampleClass3(
                    private val sampleClass1: SampleClass1,
                    private val sampleClass2: SampleClass2
                )
            """,
    )

    private val expectedClass1FactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleClass1_Factory.kt"

    private val expectedClass2FactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleClass2_Factory.kt"

    private val expectedClass3FactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleClass3_Factory.kt"

    private val expectedContainerFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/" +
            "_AppContainer.kt"

    private val expectedStartFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/_Start.kt"

    private val expectedClass1FactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.ExperimentalKojectApi
        |import com.moriatsushi.koject.Extras
        |import com.moriatsushi.koject.`internal`.Factory
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.SampleClass1
        |import kotlin.Any
        |import kotlin.OptIn
        |
        |@OptIn(ExperimentalKojectApi::class)
        |@InternalKojectApi
        |@StringIdentifier("com.testpackage.SampleClass1")
        |@Location("${folder.path}/sources/Test.kt:6")
        |public class _com_testpackage_SampleClass1_Factory() : Factory {
        |    public override fun create(extras: Extras): Any = SampleClass1()
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass1>()
        |    }
        |}
        |
        """.trimMargin()

    private val expectedClass2FactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.ExperimentalKojectApi
        |import com.moriatsushi.koject.Extras
        |import com.moriatsushi.koject.`internal`.Factory
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.SampleClass1
        |import com.testpackage.SampleClass2
        |import kotlin.Any
        |import kotlin.OptIn
        |import kotlin.Suppress
        |
        |@OptIn(ExperimentalKojectApi::class)
        |@InternalKojectApi
        |@StringIdentifier("com.testpackage.SampleClass2")
        |@Location("${folder.path}/sources/Test.kt:9")
        |public class _com_testpackage_SampleClass2_Factory(
        |    @StringIdentifier("com.testpackage.SampleClass1")
        |    @Location("${folder.path}/sources/Test.kt:10")
        |    private val provide_com_testpackage_SampleClass1: () -> Any,
        |) : Factory {
        |    @Suppress("UNCHECKED_CAST")
        |    public override fun create(extras: Extras): Any = SampleClass2(
        |        provide_com_testpackage_SampleClass1() as SampleClass1,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass2>()
        |    }
        |}
        |
        """.trimMargin()

    private val expectedClass3FactoryText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.ExperimentalKojectApi
        |import com.moriatsushi.koject.Extras
        |import com.moriatsushi.koject.`internal`.Factory
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.Location
        |import com.moriatsushi.koject.`internal`.StringIdentifier
        |import com.testpackage.SampleClass1
        |import com.testpackage.SampleClass2
        |import com.testpackage.SampleClass3
        |import kotlin.Any
        |import kotlin.OptIn
        |import kotlin.Suppress
        |
        |@OptIn(ExperimentalKojectApi::class)
        |@InternalKojectApi
        |@StringIdentifier("com.testpackage.SampleClass3")
        |@Location("${folder.path}/sources/Test.kt:14")
        |public class _com_testpackage_SampleClass3_Factory(
        |    @StringIdentifier("com.testpackage.SampleClass1")
        |    @Location("${folder.path}/sources/Test.kt:15")
        |    private val provide_com_testpackage_SampleClass1: () -> Any,
        |    @StringIdentifier("com.testpackage.SampleClass2")
        |    @Location("${folder.path}/sources/Test.kt:16")
        |    private val provide_com_testpackage_SampleClass2: () -> Any,
        |) : Factory {
        |    @Suppress("UNCHECKED_CAST")
        |    public override fun create(extras: Extras): Any = SampleClass3(
        |        provide_com_testpackage_SampleClass1() as SampleClass1,
        |        provide_com_testpackage_SampleClass2() as SampleClass2,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass3>()
        |    }
        |}
        |
        """.trimMargin()

    private val expectedContainerText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated
        |
        |import com.moriatsushi.koject.ExperimentalKojectApi
        |import com.moriatsushi.koject.Extras
        |import com.moriatsushi.koject.`internal`.Container
        |import com.moriatsushi.koject.`internal`.Identifier
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.generated.factory._com_testpackage_SampleClass1_Factory
        |import com.moriatsushi.koject.generated.factory._com_testpackage_SampleClass2_Factory
        |import com.moriatsushi.koject.generated.factory._com_testpackage_SampleClass3_Factory
        |import kotlin.Any
        |import kotlin.OptIn
        |
        |@OptIn(ExperimentalKojectApi::class)
        |@InternalKojectApi
        |public class _AppContainer : Container {
        |    private val provide_com_testpackage_SampleClass1: (Extras) -> Any by lazy { {
        |                _com_testpackage_SampleClass1_Factory().create(it)
        |            } }
        |
        |    private val provide_com_testpackage_SampleClass2: (Extras) -> Any by lazy { {
        |                _com_testpackage_SampleClass2_Factory(
        |                    { provide_com_testpackage_SampleClass1(it) },
        |                ).create(it)
        |            } }
        |
        |    private val provide_com_testpackage_SampleClass3: (Extras) -> Any by lazy { {
        |                _com_testpackage_SampleClass3_Factory(
        |                    { provide_com_testpackage_SampleClass1(it) },
        |                    { provide_com_testpackage_SampleClass2(it) },
        |                ).create(it)
        |            } }
        |
        |    public override fun resolve(id: Identifier, extras: Extras): Any? = when (id) {
        |        _com_testpackage_SampleClass1_Factory.identifier ->
        |                provide_com_testpackage_SampleClass1(extras)
        |        _com_testpackage_SampleClass2_Factory.identifier ->
        |                provide_com_testpackage_SampleClass2(extras)
        |        _com_testpackage_SampleClass3_Factory.identifier ->
        |                provide_com_testpackage_SampleClass3(extras)
        |        else -> null
        |    }
        |}
        |
        """.trimMargin()

    private val expectedStartText
        @Language("kotlin")
        get() = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject
        |
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.generated._AppContainer
        |import kotlin.OptIn
        |import kotlin.Unit
        |
        |@OptIn(InternalKojectApi::class)
        |public fun Koject.start(): Unit {
        |    Koject._start(_AppContainer())
        |}
        |
        """.trimMargin()
}
