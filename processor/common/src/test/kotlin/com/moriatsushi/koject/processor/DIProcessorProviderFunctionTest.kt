package com.moriatsushi.koject.processor

import com.moriatsushi.koject.processor.assert.assertCompileSucceed
import com.moriatsushi.koject.processor.assert.assertFileExists
import com.moriatsushi.koject.processor.assert.assertFileTextEquals
import com.moriatsushi.koject.processor.compiletesting.KotlinCompilationFactory
import com.tschuchort.compiletesting.SourceFile
import org.intellij.lang.annotations.Language
import org.junit.Rule
import org.junit.Test
import org.junit.rules.TemporaryFolder

class DIProcessorProviderFunctionTest {
    @get:Rule
    val tempFolder: TemporaryFolder = TemporaryFolder()

    private val compilationFactory = KotlinCompilationFactory()

    @Test
    fun compile() {
        val folder = tempFolder.newFolder()
        val complication = compilationFactory.create(folder)
        complication.sources = listOf(inputCode)
        val result = complication.compile()

        assertCompileSucceed(result)

        val expectedStringFactoryFile = folder.resolve(expectedStringFactoryFilePath)
        assertFileExists(expectedStringFactoryFile)
        assertFileTextEquals(expectedStringFactoryText, expectedStringFactoryFile)

        val expectedInterfaceFactoryFile = folder.resolve(expectedInterfaceFactoryFilePath)
        assertFileExists(expectedInterfaceFactoryFile)
        assertFileTextEquals(expectedInterfaceFactoryText, expectedInterfaceFactoryFile)

        val expectedClassFactoryFile = folder.resolve(expectedClassFactoryFilePath)
        assertFileExists(expectedClassFactoryFile)
        assertFileTextEquals(expectedClassFactoryText, expectedClassFactoryFile)

        val expectedContainerFile = folder.resolve(expectedContainerFilePath)
        assertFileExists(expectedContainerFile)
        assertFileTextEquals(expectedContainerText, expectedContainerFile)
    }

    private val inputCode = SourceFile.kotlin(
        "Test.kt",
        """
                package com.testpackage

                import com.moriatsushi.koject.Provides

                @Provides
                fun provideString(): String {
                    return "provided"
                }

                @Provides
                fun provideInterface(): SampleInterface {
                    return object : SampleInterface {}
                }

                @Provides
                fun provideSampleClass(string: String, type: SampleInterface): SampleClass {
                    return SampleClass(string, type)
                }

                interface SampleInterface

                class SampleClass(
                    private val string: String,
                    private val type: SampleInterface
                )
            """,
    )

    private val expectedStringFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_kotlin_String_Factory.kt"

    private val expectedInterfaceFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleInterface_Factory.kt"

    private val expectedClassFactoryFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/factory/" +
            "_com_testpackage_SampleClass_Factory.kt"

    private val expectedContainerFilePath =
        "ksp/sources/kotlin/com/moriatsushi/koject/generated/" +
            "_AppContainer.kt"

    @Language("kotlin")
    private val expectedStringFactoryText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.`internal`.identifier._Identifier
        |import com.testpackage.provideString
        |import kotlin.Any
        |import kotlin.String
        |
        |@InternalKojectApi
        |@_Identifier("kotlin.String")
        |public class _kotlin_String_Factory() {
        |    public fun create(): Any = provideString()
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<String>()
        |    }
        |}
        |
    """.trimMargin()

    @Language("kotlin")
    private val expectedInterfaceFactoryText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.`internal`.identifier._Identifier
        |import com.testpackage.SampleInterface
        |import com.testpackage.provideInterface
        |import kotlin.Any
        |
        |@InternalKojectApi
        |@_Identifier("com.testpackage.SampleInterface")
        |public class _com_testpackage_SampleInterface_Factory() {
        |    public fun create(): Any = provideInterface()
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleInterface>()
        |    }
        |}
        |
    """.trimMargin()

    @Language("kotlin")
    private val expectedClassFactoryText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated.factory
        |
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.`internal`.identifier._Identifier
        |import com.testpackage.SampleClass
        |import com.testpackage.SampleInterface
        |import com.testpackage.provideSampleClass
        |import kotlin.Any
        |import kotlin.String
        |
        |@InternalKojectApi
        |@_Identifier("com.testpackage.SampleClass")
        |public class _com_testpackage_SampleClass_Factory(
        |    @_Identifier("kotlin.String")
        |    private val provide_kotlin_String: () -> Any,
        |    @_Identifier("com.testpackage.SampleInterface")
        |    private val provide_com_testpackage_SampleInterface: () -> Any,
        |) {
        |    public fun create(): Any = provideSampleClass(
        |        provide_kotlin_String() as String,
        |        provide_com_testpackage_SampleInterface() as SampleInterface,
        |    )
        |
        |    public companion object {
        |        public val identifier: Identifier = Identifier.of<SampleClass>()
        |    }
        |}
        |
    """.trimMargin()

    @Language("kotlin")
    private val expectedContainerText = """
        |// Generated by Koject. Do not modify!
        |package com.moriatsushi.koject.generated
        |
        |import com.moriatsushi.koject.`internal`.Container
        |import com.moriatsushi.koject.`internal`.InternalKojectApi
        |import com.moriatsushi.koject.`internal`.identifier.Identifier
        |import com.moriatsushi.koject.generated.factory._com_testpackage_SampleClass_Factory
        |import com.moriatsushi.koject.generated.factory._com_testpackage_SampleInterface_Factory
        |import com.moriatsushi.koject.generated.factory._kotlin_String_Factory
        |import kotlin.Any
        |
        |@InternalKojectApi
        |public class _AppContainer : Container {
        |    private val provide_com_testpackage_SampleClass: () -> Any by lazy {
        |                _com_testpackage_SampleClass_Factory(
        |                    provide_kotlin_String,
        |                    provide_com_testpackage_SampleInterface,
        |                )::create
        |            }
        |
        |    private val provide_com_testpackage_SampleInterface: () -> Any by lazy {
        |                _com_testpackage_SampleInterface_Factory()::create
        |            }
        |
        |    private val provide_kotlin_String: () -> Any by lazy {
        |                _kotlin_String_Factory()::create
        |            }
        |
        |    public override fun resolve(id: Identifier): Any? = when (id) {
        |        _com_testpackage_SampleClass_Factory.identifier -> provide_com_testpackage_SampleClass()
        |        _com_testpackage_SampleInterface_Factory.identifier ->
        |                provide_com_testpackage_SampleInterface()
        |        _kotlin_String_Factory.identifier -> provide_kotlin_String()
        |        else -> null
        |    }
        |}
        |
    """.trimMargin()
}
